{"version":3,"sources":["types/colors.ts","components/byRegion/item.tsx","components/byRegion/index.tsx","components/byCountry/topCountryItem.tsx","store/hooks.ts","components/byCountry/topCountries.tsx","utils/converter.ts","components/informationAlert/index.tsx","components/byCurrentCountry/index.tsx","views/home/index.tsx"],"names":["RegionColors","RegionItem","data","max","selectedItem","className","onClick","style","color","regionCode","tid","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","variant","toLocaleLowerCase","now","uuid","colorRandom","GetRandomBgColor","Placeholder","as","animation","xs","bg","size","ByRegion","useGetListCaseByRegionQuery","error","isFetching","isLoading","useState","history","useHistory","selectedRegionHandler","item","push","Array","from","keys","map","i","JSON","stringify","success","resource","Math","apply","o","TopCountriesItem","handleClick","svg","width","height","title","countriesData","filter","c","code","countryCode","name","useAppSelector","useSelector","TopCountry","useDispatch","useGetTopByCountryQuery","state","selectedCountry","value","selectedCountryHandler","ConverterLocaleDateString","date","lang","useAppContext","locale","toUpperCase","Date","toLocaleDateString","day","month","year","InformationAlert","useGetTotalsCaseQuery","updatedDate","todayConfirmed","todayDeaths","ByCurrentCountry","cc","setDate","getDate","defaultPayload","payload","useGetTotalCaseByCountryQuery","md","cursor","KeyValues","query","Home","getGurrentCountry","setLocale","appSetting","useGetCurrentCountryQuery","isSuccess","country"],"mappings":"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","file":"static/js/7.e60814a5.chunk.js","sourcesContent":["import { Dictionary } from \"./type\";\r\n\r\nexport const RegionColors: Dictionary<any> = {\r\n    'AMRO': 'rgb(255, 187, 48)',\r\n    'EURO': 'rgb(200, 214, 91)',\r\n    'SEARO': 'rgb(82, 0, 174)',\r\n    'EMRO': 'rgb(0, 174, 143)',\r\n    'WPRO': 'rgb(193, 37, 146)',\r\n    'AFRO': 'rgb(10, 113, 213)',\r\n    'OTHER': 'rgb(71, 71, 71)'\r\n};\r\n","import React from 'react';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./regionItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\ntype Props = {\r\n    data?: Covid19DataByRegion;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByRegion): void;\r\n}\r\n\r\nconst RegionItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        // selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"region-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <h5 style={{ color: RegionColors[data.regionCode] }}  >\r\n                            <b><Translation tid={data.regionCode} /> </b>\r\n                        </h5>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar key={uuid()} variant={data.regionCode.toLocaleLowerCase()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (<>\r\n            <div className=\"region-item-body my-4\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <Placeholder as=\"a\" animation=\"glow\">\r\n                        <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                    </Placeholder>\r\n                    <div><b>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </b>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div></div>\r\n                    &nbsp;\r\n                    <small style={{ fontSize: 10 }}>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={7} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </small >\r\n                </div>\r\n                <Placeholder as=\"a\" animation=\"glow\">\r\n                    <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                </Placeholder>\r\n            </div>\r\n\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default RegionItem;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetListCaseByRegionQuery } from '../../services/getListCaseByRegion';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport RegionItem from './item';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { uuid } from 'uuidv4';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst ByRegion: React.FC = () => {\r\n\r\n    const { data, error, isFetching, isLoading } = useGetListCaseByRegionQuery();\r\n\r\n    const [selectedRegion, setSelectedRegion] = useState<Covid19DataByRegion>();\r\n    const history = useHistory();\r\n\r\n    const selectedRegionHandler = (item: Covid19DataByRegion) => {\r\n        history.push('/region', item);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"Situation_by_WHO_Region\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <RegionItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            data?.resource.map((item) => (\r\n                                <>\r\n                                    <RegionItem key={uuid()} selectedItem={selectedRegionHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByRegion;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./countryItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\nimport countriesData from \"../../locales/countries.json\";\r\n\r\ntype Props = {\r\n    data?: Covid19DataByCountry;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByCountry): void;\r\n}\r\n\r\nconst TopCountriesItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                svg\r\n                                style={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em',\r\n                                }}\r\n                                title={countriesData.filter(c => c.code == data.countryCode)[0]?.name}\r\n                                countryCode={data.countryCode} />&nbsp;\r\n                            <span className=\"text-left\" >\r\n                                <b>{countriesData.filter(c => c.code == data.countryCode)[0]?.name}</b>\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar variant={GetRandomBgColor()} key={uuid()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (\r\n            <>\r\n                <>\r\n                    <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div></div>\r\n                            &nbsp;\r\n                            <small style={{ fontSize: 10 }}>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </small >\r\n                        </div>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </div>\r\n                </>\r\n            </>)\r\n    }\r\n}\r\n\r\nexport default TopCountriesItem;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '.';\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetTopByCountryQuery } from '../../services/getTopByCountry';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\nimport { uuid } from 'uuidv4';\r\nimport TopCountriesItem from './topCountryItem';\r\n//@ts-ignore\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectCountry } from './selectedCountrySlice';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TopCountry: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { data, error, isFetching, isLoading } = useGetTopByCountryQuery();\r\n    const [selectedCountry, setSelectedCountry] = useState<Covid19DataByCountry>();\r\n    const count = useAppSelector(state => state.selectedCountry.value)\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col  >\r\n                    <h5> <Translation tid=\"Situation_by_WHO_TopCountries\" /> </h5>\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <>\r\n                                    <TopCountriesItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            <>\r\n                                <Scrollbars style={{ height: 690 }}>\r\n\r\n                                    {data?.resource.map((item) => (\r\n                                        <>\r\n                                            <TopCountriesItem key={uuid()} selectedItem={selectedCountryHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Scrollbars>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopCountry;","\r\nimport { useAppContext } from '../contexts/appContext';\r\n\r\n\r\nfunction ConverterLocaleDateString(date: any) {\r\n    const { locale } = useAppContext();\r\n    let lang = 'en-US';\r\n    switch (locale.toUpperCase()) {\r\n        case \"VN\":\r\n            lang = 'vi-VN';\r\n            break;\r\n        case \"US\":\r\n            lang = 'en-US';\r\n            break;\r\n    }\r\n    return (new Date(date)).toLocaleDateString(lang, { day: \"numeric\", month: \"long\", year: \"numeric\" });\r\n}\r\n\r\nexport default ConverterLocaleDateString;","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ConverterLocaleDateString from \"../../utils/converter\";\r\nimport { useGetTotalsCaseQuery } from '../../services/getTotalsCase';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from \"../../utils/functions\";\r\n\r\nconst InformationAlert: React.FC = () => {\r\n    const { data, error, isFetching, isLoading } = useGetTotalsCaseQuery();\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <div className=\"p-1 mt-4 text-center bg-info1 bg-gradient text-white1 rounded1-1 shadow-1sm\">\r\n                        <div className=\"container-fluid py-2\">\r\n                            <p className=\"col-md-12 fs-4\">\r\n                                {(isFetching || isLoading) &&\r\n                                    <>\r\n                                        <Placeholder as=\"p\" animation=\"glow\">\r\n                                            <Placeholder xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                            <Placeholder xs={7} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                        </Placeholder>\r\n                                    </>\r\n                                }\r\n                                {error && <div>{JSON.stringify(error)}</div>}\r\n                                {!error && !isFetching && data?.success && data?.resource != null &&\r\n                                    <>\r\n                                        <Translation tid=\"who_reported_desciption1\" />\r\n                                        {ConverterLocaleDateString(data?.resource.updatedDate)}\r\n                                        <Translation tid=\"who_reported_desciption2\" />\r\n                                        <span className=\"text-warning\"><b>{data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption3\" />\r\n                                        <span className=\"text-danger\"><b>{data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption4\" />\r\n                                    </>\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </bt.Row>\r\n            </bt.Container>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col>\r\n                        <h5><Translation tid=\"today_report\" /> <span className=\"text-warning\"><b>{data?.resource.todayConfirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span> <Translation tid=\"Confirmed\" /> / <span className=\"text-danger\"><b>{data?.resource.todayDeaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span> <Translation tid=\"Deaths\" />\r\n                        </h5>\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InformationAlert;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GetCurrentCountry, GetRandomBgColor } from '../../utils/functions';\r\n\r\nimport { useGetCurrentCountryQuery } from '../../services/getCurrentCountry';\r\nimport { useGetTotalCaseByCountryQuery } from '../../services/getTotalCaseByCountry';\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\nimport { CurrentCountry } from '../../types/currentCountry';\r\n\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n    cc: CurrentCountry\r\n}\r\nconst ByCurrentCountry: React.FC<Props> = ({ cc }) => {\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        countryCode: cc.countryCode\r\n    };\r\n\r\n    const [payload, setPayload] = useState<DetailByCountryRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetTotalCaseByCountryQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={12} >\r\n                        {(isFetching || isLoading) &&\r\n                            <>{\r\n                                <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                                    <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                                </bt.Placeholder>\r\n                            }\r\n                            </>\r\n                        }\r\n                        {error && <div>{JSON.stringify(error)}</div>}\r\n                        {!error && !isFetching && data?.success && data?.resource != null &&\r\n                            <>\r\n                                <div className=\"d-flex justify-content-between p-3 my-3 text-white bg-info rounded shadow-sm\" style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => selectedCountryHandler(data?.resource)}>\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <ReactCountryFlag className=\"emojiFlag\"\r\n                                            svg\r\n                                            style={{\r\n                                                width: '3em',\r\n                                                height: '3em',\r\n                                            }}\r\n                                            title={KeyValues[\"country\"][data?.resource.countryCode]}\r\n                                            countryCode={data?.resource.countryCode} />&nbsp;\r\n\r\n\r\n                                        <div className=\"lh-1  ml-3\">\r\n                                            <h1 className=\"h4 mb-0 text-white lh-1\">{KeyValues[\"country\"][data?.resource.countryCode]}</h1>\r\n                                            <small>IP: {cc.query}</small>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <b><span className=\"text-warning\">\r\n                                            {data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                            /\r\n                                            <span className=\"text-danger\"> {data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                            (<span>{((data?.resource.deaths / data?.resource.confirmed) * 100).toFixed(2)} %</span>)\r\n                                        </b>\r\n                                        <div>\r\n                                            &nbsp;\r\n                                            <small style={{ fontSize: 12 }}>\r\n                                                <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                                            </small >\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default ByCurrentCountry;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport ByRegion from '../../components/byRegion';\r\nimport TopCountry from '../../components/byCountry/topCountries';\r\nimport InformationAlert from '../../components/informationAlert';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { useGetCurrentCountryQuery } from '../../services/getCurrentCountry';\r\nimport { CurrentCountry } from '../../types/currentCountry';\r\nimport ByCurrentCountry from '../../components/byCurrentCountry';\r\n\r\nconst Home: React.FC = (): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    const getGurrentCountry = useGetCurrentCountryQuery();\r\n\r\n    const defaultCountry: CurrentCountry = {\r\n        country: \"VN\",\r\n        countryCode: \"VN\",\r\n        query: \"127.0.0.1\",\r\n    };\r\n    return (\r\n        <Layout>\r\n            <InformationAlert />\r\n            {getGurrentCountry.isSuccess && getGurrentCountry.data && (\r\n                <ByCurrentCountry cc={getGurrentCountry.data} />\r\n            )\r\n            }\r\n            {!getGurrentCountry.isSuccess && !getGurrentCountry.data && (\r\n                <ByCurrentCountry cc={defaultCountry} />\r\n            )\r\n            }\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={6}>\r\n                        <ByRegion />\r\n                    </bt.Col>\r\n                    <bt.Col md={6}>\r\n                        <TopCountry />\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport default Home;"],"sourceRoot":""}