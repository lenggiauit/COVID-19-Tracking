{"version":3,"sources":["components/languageSelector/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx","components/pageNotFound/index.tsx","components/byRegion/detailLoading.tsx","components/byCountry/detail.tsx","views/country/index.tsx","components/translation/index.tsx","contexts/appContext.tsx","locales/index.tsx","utils/functions.ts"],"names":["LanguageSelector","useAppContext","locale","setLocale","handleLanguageChange","e","selectLang","target","id","window","localStorage","setItem","console","log","title","localeOptions","Object","entries","map","name","Item","onClick","Navigation","collapseOnSelect","variant","expand","Brand","href","tid","Toggle","aria-controls","Collapse","Link","className","appSetting","require","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","params","Layout","children","PageNotFound","DetailLoading","lineCount","Array","from","keys","i","as","animation","xs","bg","GetRandomBgColor","size","uuid","CountryDetail","selectedItemData","start","Date","setDate","getDate","defaultPayload","countryCode","startDate","endDate","selectedHandler","type","setMonth","getMonth","setFullYear","getFullYear","payload","setPayload","useState","useGetDetailByCountryQuery","data","error","isFetching","isLoading","md","style","cursor","svg","width","height","KeyValues","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","role","htmlFor","JSON","stringify","success","resource","labels","covidReportByDay","reportDate","toLocaleDateString","datasets","label","dictionaryList","totalConfirmed","fill","borderColor","totalDeaths","Country","state","useLocation","Translation","props","str","args","replace","match","index","AppContext","createContext","warn","useContext","AppProvider","defaultLocale","getItem","provider","Provider","value","en","vn","countries","bgColors","Math","floor","random","length"],"mappings":"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","file":"static/js/8.e82b1b3f.chunk.js","sourcesContent":["import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        {/* <bt.Nav>\r\n                            <bt.Nav.Link href=\"/who\"><Translation tid=\"who\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/vaccinedata\"><Translation tid=\"vaccinedata\" /></bt.Nav.Link>\r\n                        </bt.Nav> */}\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\nimport { Translation } from '../translation';\r\n\r\n\r\nconst PageNotFound: React.FC = (): ReactElement => {\r\n    return (\r\n        <>\r\n            <div className=\"px-4 py-5 my-5 text-center\">\r\n                <h1 className=\"mt-5\"><Translation tid=\"page_not_found\" /></h1>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n","import React from 'react';\r\nimport { Placeholder } from 'react-bootstrap';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { uuid } from 'uuidv4';\r\n\r\ntype Props = {\r\n    lineCount?: number;\r\n}\r\nconst DetailLoading: React.FC<Props> = ({ lineCount }) => {\r\n    return (\r\n        <>{\r\n            Array.from(Array(lineCount != null ? lineCount : 1).keys()).map((i) => (\r\n                <Placeholder key={uuid()} as=\"p\" animation=\"glow\">\r\n                    <Placeholder key={uuid()} xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                </Placeholder>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailLoading;","import React, { useRef, useState } from 'react';\r\nimport { Translation } from '../translation';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { dictionaryList, localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { uuid } from 'uuidv4';\r\nimport * as bt from 'react-bootstrap';\r\nimport DetailLoading from '../byRegion/detailLoading';\r\nimport { useGetDetailByCountryQuery } from '../../services/getDetailByCountry';\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\ntype Props = {\r\n    selectedItemData: Covid19DataByCountry;\r\n}\r\n\r\nconst CountryDetail: React.FC<Props> = ({ selectedItemData }) => {\r\n    const { locale, } = useAppContext();\r\n\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        countryCode: selectedItemData.countryCode,\r\n        startDate: start,\r\n        endDate: new Date(),\r\n    };\r\n\r\n    const selectedHandler = (type: string) => {\r\n        let start = new Date();\r\n        switch (type) {\r\n            case \"Weekly\":\r\n                start.setDate(new Date().getDate() - 7)\r\n                break;\r\n            case \"Monthly\":\r\n                start.setMonth(new Date().getMonth() - 1)\r\n                break;\r\n            case \"Yearly\":\r\n                start.setFullYear(new Date().getFullYear() - 1)\r\n                break;\r\n        }\r\n        const payload = {\r\n            countryCode: selectedItemData.countryCode,\r\n            startDate: start,\r\n            endDate: new Date(),\r\n        };\r\n        setPayload(payload);\r\n    };\r\n\r\n    const [payload, setPayload] = useState<DetailByCountryRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetDetailByCountryQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            {selectedItemData && (\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <bt.Col md={12} >\r\n                            <div className=\"d-flex justify-content-between p-3 my-3 text-white bg-info rounded shadow-sm\" style={{ cursor: \"pointer\" }}\r\n                            >\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <ReactCountryFlag className=\"emojiFlag\"\r\n                                        svg\r\n                                        style={{\r\n                                            width: '3em',\r\n                                            height: '3em',\r\n                                        }}\r\n                                        title={KeyValues[\"country\"][selectedItemData.countryCode]}\r\n                                        countryCode={selectedItemData.countryCode} />&nbsp;\r\n\r\n\r\n                                    <div className=\"lh-1  ml-3\">\r\n                                        <h1 className=\"h4 mb-0 text-white lh-1\">{KeyValues[\"country\"][selectedItemData.countryCode]}</h1>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <b><span className=\"text-warning\">\r\n                                        {selectedItemData.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                        /\r\n                                        <span className=\"text-danger\"> {selectedItemData.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                        (<span>{((selectedItemData.deaths / selectedItemData.confirmed) * 100).toFixed(2)} %</span>)\r\n                                    </b>\r\n                                    <div>\r\n                                        &nbsp;\r\n                                        <small style={{ fontSize: 12 }}>\r\n                                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                                        </small >\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </bt.Col>\r\n\r\n                    </bt.Row>\r\n                    <hr />\r\n                    <bt.Row>\r\n                        <bt.Col md={12} >\r\n                            <div className=\"position-relative\">\r\n                                <div className=\"float-right\" style={{ width: 200 }}>\r\n                                    <div className=\"btn-group btn-group-sm\" role=\"group\"  >\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" onClick={() => { selectedHandler('Weekly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio1\">Weekly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" onClick={() => { selectedHandler('Monthly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\">Monthly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio3\" onClick={() => { selectedHandler('Yearly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio3\">Yearly</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {(isFetching || isLoading) && <DetailLoading key={uuid()} lineCount={16} />}\r\n                            {error && <div>{JSON.stringify(error)}</div>}\r\n                            {!error && !isFetching && data?.success && data?.resource != null &&\r\n                                <>\r\n\r\n                                    <div className=\"position-relative\">\r\n                                        <div className=\"text-center\" >\r\n                                            <div style={{ width: \"100%\", height: 420 }}>\r\n                                                <Line data={{\r\n                                                    labels: data.resource.covidReportByDay.map((i) => new Date(i.reportDate).toLocaleDateString(locale)),\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Confirmed\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalConfirmed),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f7c50c\"\r\n                                                        },\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Deaths\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalDeaths),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f70c0c\"\r\n                                                        }\r\n                                                    ]\r\n                                                }} key={uuid()} />\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </bt.Col>\r\n                    </bt.Row>\r\n\r\n                </bt.Container>\r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CountryDetail;","import React, { ReactElement, useState } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { currentCountry } from '../../components/byCountry/selectedCountrySlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\nimport { useLocation } from 'react-router-dom';\r\nimport PageNotFound from '../../components/pageNotFound';\r\nimport CountryDetail from '../../components/byCountry/detail';\r\n\r\nconst Country: React.FC = (): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    const { state } = useLocation<Covid19DataByCountry>();\r\n    if (state) {\r\n        return (\r\n            <Layout>\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <CountryDetail selectedItemData={state} />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n            </Layout>\r\n        )\r\n    } else {\r\n        return (\r\n            <Layout>\r\n                <PageNotFound />\r\n            </Layout>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Country;","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n","import axios from \"axios\";\r\nimport { useGetCurrentCountryQuery } from \"../services/getCurrentCountry\";\r\nimport { AppSetting } from \"../types/type\";\r\n\r\nconst bgColors = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"dark\"];\r\nexport function GetRandomBgColor() {\r\n    return bgColors[Math.floor(Math.random() * bgColors.length)];;\r\n}\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\n\r\nexport async function GetCurrentCountry() {\r\n    try {\r\n        await axios.get(appSetting.CountryViaIPUrl).then((res) => {\r\n            console.log(res.data.countryCode)\r\n            return res.data.countryCode;\r\n        });\r\n    } catch (error) {\r\n        return \"VN\";\r\n    }\r\n}"],"sourceRoot":""}