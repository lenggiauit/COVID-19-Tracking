{"version":3,"sources":["utils/functions.ts","types/colors.ts","components/byRegion/item.tsx","components/byRegion/index.tsx","components/byCountry/topCountryItem.tsx","store/hooks.ts","components/byCountry/topCountries.tsx","utils/converter.ts","components/informationAlert/index.tsx","components/byCurrentCountry/index.tsx","views/home/index.tsx","contexts/appContext.tsx","components/translation/index.tsx","locales/index.tsx","components/languageSelector/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx"],"names":["bgColors","GetRandomBgColor","Math","floor","random","length","require","RegionColors","RegionItem","data","max","selectedItem","className","onClick","style","color","regionCode","tid","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","variant","toLocaleLowerCase","now","uuid","colorRandom","Placeholder","as","animation","xs","bg","size","ByRegion","useGetListCaseByRegionQuery","error","isFetching","isLoading","useState","selectedRegionHandler","item","window","location","href","Array","from","keys","map","i","JSON","stringify","success","resource","apply","o","TopCountriesItem","handleClick","svg","width","height","title","KeyValues","countryCode","useAppSelector","useSelector","TopCountry","useDispatch","useGetTopByCountryQuery","history","state","selectedCountry","value","useHistory","selectedCountryHandler","push","ConverterLocaleDateString","date","lang","useAppContext","locale","toUpperCase","Date","toLocaleDateString","day","month","year","InformationAlert","useGetTotalsCaseQuery","updatedDate","CurrentCountry","currentCountryCode","useGetCurrentCountryQuery","start","setDate","getDate","defaultPayload","startDate","endDate","payload","useGetByCountryQuery","md","Home","setLocale","appSetting","AppContext","createContext","console","warn","useContext","AppProvider","children","defaultLocale","localStorage","getItem","provider","Provider","Translation","props","str","args","params","dictionaryList","replace","match","index","en","vn","localeOptions","countries","LanguageSelector","handleLanguageChange","e","selectLang","target","id","setItem","log","Object","entries","name","Item","Navigation","collapseOnSelect","expand","Brand","Toggle","Collapse","Link","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","Layout"],"mappings":"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","file":"static/js/5.469c7319.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useGetCurrentCountryQuery } from \"../services/getCurrentCountry\";\r\nimport { AppSetting } from \"../types/type\";\r\n\r\nconst bgColors = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"dark\"];\r\nexport function GetRandomBgColor() {\r\n    return bgColors[Math.floor(Math.random() * bgColors.length)];;\r\n}\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\n\r\nexport async function GetCurrentCountry() {\r\n    try {\r\n        await axios.get(appSetting.CountryViaIPUrl).then((res) => {\r\n            console.log(res.data.countryCode)\r\n            return res.data.countryCode;\r\n        });\r\n    } catch (error) {\r\n        return \"VN\";\r\n    }\r\n}","import { Dictionary } from \"./type\";\r\n\r\nexport const RegionColors: Dictionary<any> = {\r\n    'AMRO': 'rgb(255, 187, 48)',\r\n    'EURO': 'rgb(200, 214, 91)',\r\n    'SEARO': 'rgb(82, 0, 174)',\r\n    'EMRO': 'rgb(0, 174, 143)',\r\n    'WPRO': 'rgb(193, 37, 146)',\r\n    'AFRO': 'rgb(10, 113, 213)',\r\n    'OTHER': 'rgb(71, 71, 71)'\r\n};\r\n","import React from 'react';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./regionItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\ntype Props = {\r\n    data?: Covid19DataByRegion;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByRegion): void;\r\n}\r\n\r\nconst RegionItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"region-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <h5 style={{ color: RegionColors[data.regionCode] }}  >\r\n                            <b><Translation tid={data.regionCode} /> </b>\r\n                        </h5>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar key={uuid()} variant={data.regionCode.toLocaleLowerCase()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (<>\r\n            <div className=\"region-item-body my-4\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <Placeholder as=\"a\" animation=\"glow\">\r\n                        <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                    </Placeholder>\r\n                    <div><b>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </b>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div></div>\r\n                    &nbsp;\r\n                    <small style={{ fontSize: 10 }}>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={7} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </small >\r\n                </div>\r\n                <Placeholder as=\"a\" animation=\"glow\">\r\n                    <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                </Placeholder>\r\n            </div>\r\n\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default RegionItem;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetListCaseByRegionQuery } from '../../services/getListCaseByRegion';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport RegionItem from './item';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport RegionDetail from './detail';\r\nimport DetailLoading from './detailLoading';\r\nimport { uuid } from 'uuidv4';\r\n\r\nconst ByRegion: React.FC = () => {\r\n\r\n    const { data, error, isFetching, isLoading } = useGetListCaseByRegionQuery();\r\n\r\n    const [selectedRegion, setSelectedRegion] = useState<Covid19DataByRegion>();\r\n\r\n    const selectedRegionHandler = (item: Covid19DataByRegion) => {\r\n        //setSelectedRegion(item);\r\n        window.location.href = '/region';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"Situation_by_WHO_Region\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <RegionItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success &&\r\n                        <> {\r\n                            data?.resource.map((item) => (\r\n                                <>\r\n                                    <RegionItem key={uuid()} selectedItem={selectedRegionHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByRegion;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./countryItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\n\r\ntype Props = {\r\n    data?: Covid19DataByCountry;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByCountry): void;\r\n}\r\n\r\nconst TopCountriesItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                svg\r\n                                style={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em',\r\n                                }}\r\n                                title={KeyValues[\"country\"][data.countryCode]}\r\n                                countryCode={data.countryCode} />&nbsp;\r\n                            <span className=\"text-left\" >\r\n                                <b>{KeyValues[\"country\"][data.countryCode]} </b>\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar variant={GetRandomBgColor()} key={uuid()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (\r\n            <>\r\n                <>\r\n                    <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div></div>\r\n                            &nbsp;\r\n                            <small style={{ fontSize: 10 }}>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </small >\r\n                        </div>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </div>\r\n                </>\r\n            </>)\r\n    }\r\n}\r\n\r\nexport default TopCountriesItem;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '.';\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetTopByCountryQuery } from '../../services/getTopByCountry';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\nimport { uuid } from 'uuidv4';\r\nimport TopCountriesItem from './topCountryItem';\r\n//@ts-ignore\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectCountry } from './selectedCountrySlice';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TopCountry: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { data, error, isFetching, isLoading } = useGetTopByCountryQuery();\r\n    const [selectedCountry, setSelectedCountry] = useState<Covid19DataByCountry>();\r\n    const count = useAppSelector(state => state.selectedCountry.value)\r\n    const history = useHistory();\r\n\r\n\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        //setSelectedCountry(item);\r\n        // dispatch(selectCountry());\r\n        history.push('/country', item);\r\n        window.location.href = '/country';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col  >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"Situation_by_WHO_TopCountries\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <>\r\n                                    <TopCountriesItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success &&\r\n                        <> {\r\n                            <>\r\n                                <Scrollbars style={{ height: 690 }}>\r\n\r\n                                    {data?.resource.map((item) => (\r\n                                        <>\r\n                                            <TopCountriesItem key={uuid()} selectedItem={selectedCountryHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Scrollbars>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopCountry;","\r\nimport { useAppContext } from '../contexts/appContext';\r\n\r\n\r\nfunction ConverterLocaleDateString(date: any) {\r\n    const { locale } = useAppContext();\r\n    let lang = 'en-US';\r\n    switch (locale.toUpperCase()) {\r\n        case \"VN\":\r\n            lang = 'vi-VN';\r\n            break;\r\n        case \"US\":\r\n            lang = 'en-US';\r\n            break;\r\n    }\r\n    return (new Date(date)).toLocaleDateString(lang, { day: \"numeric\", month: \"long\", year: \"numeric\" });\r\n}\r\n\r\nexport default ConverterLocaleDateString;","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ConverterLocaleDateString from \"../../utils/converter\";\r\nimport { useGetTotalsCaseQuery } from '../../services/getTotalsCase';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from \"../../utils/functions\";\r\n\r\nconst InformationAlert: React.FC = () => {\r\n    const { data, error, isFetching, isLoading } = useGetTotalsCaseQuery();\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <div className=\"p-1 mt-4 text-center bg-info1 bg-gradient text-white1 rounded1-1 shadow-1sm\">\r\n                        <div className=\"container-fluid py-2\">\r\n                            <p className=\"col-md-12 fs-4\">\r\n                                {(isFetching || isLoading) &&\r\n                                    <>\r\n                                        <Placeholder as=\"p\" animation=\"glow\">\r\n                                            <Placeholder xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                            <Placeholder xs={7} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                        </Placeholder>\r\n                                    </>\r\n                                }\r\n                                {error && <div>{JSON.stringify(error)}</div>}\r\n                                {!error && !isFetching && data?.success &&\r\n                                    <>\r\n                                        <Translation tid=\"who_reported_desciption1\" />\r\n                                        {ConverterLocaleDateString(data?.resource.updatedDate)}\r\n                                        <Translation tid=\"who_reported_desciption2\" />\r\n                                        <span className=\"text-warning\"><b>{data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption3\" />\r\n                                        <span className=\"text-danger\"><b>{data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption4\" />\r\n                                    </>\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InformationAlert;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GetCurrentCountry, GetRandomBgColor } from '../../utils/functions';\r\n\r\nimport { useGetCurrentCountryQuery } from '../../services/getCurrentCountry';\r\nimport { useGetByCountryQuery } from '../../services/getByCountry';\r\nimport { DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\n\r\nconst CurrentCountry: React.FC = () => {\r\n    const currentCountryCode = useGetCurrentCountryQuery().data?.countryCode || \"VN\";\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        countryCode: currentCountryCode,\r\n        startDate: start,\r\n        endDate: new Date(),\r\n    };\r\n\r\n    const [payload, setPayload] = useState<DetailByCountryRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetByCountryQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={12} >\r\n                        {(isFetching || isLoading) && (\r\n                            <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                                <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                            </bt.Placeholder>)}\r\n                        {!error && !isFetching && <h5> <Translation tid=\"Situation_by_Current_Country\" /> </h5>}\r\n\r\n                    </bt.Col>\r\n                </bt.Row>\r\n                <bt.Row>\r\n                    <bt.Col md={12} >\r\n                        {(isFetching || isLoading) &&\r\n                            <>{\r\n                                <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                                    <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                                </bt.Placeholder>\r\n                            }\r\n                            </>\r\n                        }\r\n                        {error && <div>{JSON.stringify(error)}</div>}\r\n                        {!error && !isFetching && data?.success &&\r\n                            <>\r\n                                <div className=\"country-item-body my-4 bg-info rounded p-2\"  >\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <div>\r\n                                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                                svg\r\n                                                style={{\r\n                                                    width: '3em',\r\n                                                    height: '3em',\r\n                                                }}\r\n                                                title={KeyValues[\"country\"][data?.resource.countryCode]}\r\n                                                countryCode={data?.resource.countryCode} />&nbsp;\r\n                                            <span className=\"text-left\" >\r\n                                                <b>{KeyValues[\"country\"][data?.resource.countryCode]} </b>\r\n                                            </span>\r\n                                        </div>\r\n                                        <div>\r\n                                            <b><span className=\"text-warning\">\r\n                                                {data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                                /\r\n                                                <span className=\"text-danger\"> {data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                                (<span>{((data?.resource.deaths / data?.resource.confirmed) * 100).toFixed(2)} %</span>)\r\n                                            </b>\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <div></div>\r\n                                        &nbsp;\r\n                                        <small style={{ fontSize: 10 }}>\r\n                                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                                        </small >\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default CurrentCountry;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport ByRegion from '../../components/byRegion';\r\nimport TopCountry from '../../components/byCountry/topCountries';\r\nimport InformationAlert from '../../components/informationAlert';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport CurrentCountry from '../../components/byCurrentCountry';\r\n\r\nconst Home: React.FC = (): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <InformationAlert />\r\n            <CurrentCountry />\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={6}>\r\n                        <ByRegion />\r\n                    </bt.Col>\r\n                    <bt.Col md={6}>\r\n                        <TopCountry />\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport default Home;","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n","import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        {/* <bt.Nav>\r\n                            <bt.Nav.Link href=\"/who\"><Translation tid=\"who\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/vaccinedata\"><Translation tid=\"vaccinedata\" /></bt.Nav.Link>\r\n                        </bt.Nav> */}\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;"],"sourceRoot":""}