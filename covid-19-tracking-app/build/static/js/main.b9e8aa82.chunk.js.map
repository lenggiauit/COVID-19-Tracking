{"version":3,"sources":["services/getTotalsCase.ts","services/getListCaseByRegion.ts","services/getDetailByRegion.ts","services/getTopByCountry.ts","services/getCurrentCountry.ts","services/getTotalCaseByCountry.ts","services/getCountriesByRegion.ts","services/getDetailByCountry.ts","reportWebVitals.ts","components/pageLoading/index.tsx","components/globalSpinner/index.tsx","utils/history.tsx","routes/index.tsx","components/byCountry/selectedCountrySlice.ts","store/index.ts","index.tsx"],"names":["appSetting","require","GetTotalsCase","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","BaseUrl","endpoints","builder","getTotalsCase","query","url","method","transformResponse","response","useGetTotalsCaseQuery","GetListCaseByRegion","useGetListCaseByRegionQuery","GetDetailByRegion","payload","body","useGetDetailByRegionQuery","GetTopByCountry","getTopByCountry","useGetTopByCountryQuery","GetCurrentCountry","CountryViaIPUrl","useGetCurrentCountryQuery","GetTotalCaseByCountry","useGetTotalCaseByCountryQuery","GetCountriesByRegion","useGetCountriesByRegionQuery","GetDetailByCountry","useGetDetailByCountryQuery","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PageLoading","className","type","color","height","width","GlobalSpinner","promiseInProgress","usePromiseTracker","createBrowserHistory","Home","lazy","Promise","all","resolve","setTimeout","Country","Region","IndexRouter","history","fallback","path","exact","component","selectedCountrySlice","createSlice","name","initialState","reducers","selectCountry","state","value","actions","store","configureStore","reducer","selectedCountryReducer","middleware","getDefaultMiddleware","serializableCheck","concat","setupListeners","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9e8aa82.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiResponse, AppSetting } from \"../types/type\";\r\nimport type { Covid19Data } from '../types/covid19Data';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetTotalsCase = createApi({\r\n    reducerPath: 'GetTotalsCase',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        getTotalsCase: builder.query<ApiResponse<Covid19Data>, void>({\r\n            query: () => ({\r\n                url: 'GetTotalsCase',\r\n                method: 'get'\r\n            }),\r\n            transformResponse(response: ApiResponse<Covid19Data>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetTotalsCaseQuery } = GetTotalsCase\r\n\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByRegion } from '../types/covid19DataByRegion';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetListCaseByRegion = createApi({\r\n    reducerPath: 'allCaseByRegion',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        GetListCaseByRegion: builder.query<ApiResponse<Covid19DataByRegion[]>, void>({\r\n            query: () => ({\r\n                url: 'GetAllCaseByRegion',\r\n                method: 'get'\r\n            }),\r\n            transformResponse(response: ApiResponse<Covid19DataByRegion[]>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetListCaseByRegionQuery } = GetListCaseByRegion\r\n\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiRequest, ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByRegion } from '../types/covid19DataByRegion';\r\nimport { CovidReportDetail } from '../types/covidReportDetail';\r\nimport { CovidReportDetailRequest } from '../types/covidReportDetailRequest';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetDetailByRegion = createApi({\r\n    reducerPath: 'GetDetailByRegion',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        GetDetailByRegion: builder.query<ApiResponse<CovidReportDetail>, ApiRequest<CovidReportDetailRequest>>({\r\n            query: (payload) => ({\r\n                url: 'GetDetailByRegion',\r\n                method: 'post',\r\n                body: payload\r\n            }),\r\n            transformResponse(response: ApiResponse<CovidReportDetail>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetDetailByRegionQuery } = GetDetailByRegion\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByCountry } from '../types/covid19DataByCountry';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetTopByCountry = createApi({\r\n    reducerPath: 'GetTopByCountry',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        getTopByCountry: builder.query<ApiResponse<Covid19DataByCountry[]>, void>({\r\n            query: () => ({\r\n                url: 'GetTopByCountry',\r\n                method: 'get'\r\n            }),\r\n            transformResponse(response: ApiResponse<Covid19DataByCountry[]>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetTopByCountryQuery } = GetTopByCountry;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiRequest, ApiResponse, AppSetting } from \"../types/type\";\r\nimport { CovidReportDetail } from '../types/covidReportDetail';\r\nimport { CovidReportDetailRequest } from '../types/covidReportDetailRequest';\r\nimport { CurrentCountry } from '../types/currentCountry';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetCurrentCountry = createApi({\r\n    reducerPath: 'GetCurrentCountry',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.CountryViaIPUrl }),\r\n    endpoints: (builder) => ({\r\n        GetCurrentCountry: builder.query<CurrentCountry, void>({\r\n            query: (payload) => ({\r\n                url: '',\r\n                method: 'get',\r\n                body: payload\r\n            }),\r\n            transformResponse(response: CurrentCountry) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetCurrentCountryQuery } = GetCurrentCountry","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiRequest, ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../types/covid19DataByCountry';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetTotalCaseByCountry = createApi({\r\n    reducerPath: 'GetTotalCaseByCountry',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        GetTotalCaseByCountry: builder.query<ApiResponse<Covid19DataByCountry>, ApiRequest<DetailByCountryRequest>>({\r\n            query: (payload) => ({\r\n                url: 'GetTotalCaseByCountry',\r\n                method: 'post',\r\n                body: payload\r\n            }),\r\n            transformResponse(response: ApiResponse<Covid19DataByCountry>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetTotalCaseByCountryQuery } = GetTotalCaseByCountry","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiRequest, ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByRegion } from '../types/covid19DataByRegion';\r\nimport { CovidReportDetailRequest } from '../types/covidReportDetailRequest';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetCountriesByRegion = createApi({\r\n    reducerPath: 'GetCountriesByRegion',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        GetCountriesByRegion: builder.query<ApiResponse<Covid19DataByRegion[]>, ApiRequest<CovidReportDetailRequest>>({\r\n            query: (payload) => ({\r\n                url: 'GetCountriesByRegion',\r\n                method: 'post',\r\n                body: payload\r\n            }),\r\n            transformResponse(response: ApiResponse<Covid19DataByRegion[]>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetCountriesByRegionQuery } = GetCountriesByRegion;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ApiRequest, ApiResponse, AppSetting } from \"../types/type\";\r\nimport { Covid19DataByRegion } from '../types/covid19DataByRegion';\r\nimport { CovidReportDetail } from '../types/covidReportDetail';\r\nimport { CovidReportDetailRequest } from '../types/covidReportDetailRequest';\r\nimport { DetailByCountryRequest } from '../types/covid19DataByCountry';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport const GetDetailByCountry = createApi({\r\n    reducerPath: 'GetDetailByCountry',\r\n    baseQuery: fetchBaseQuery({ baseUrl: appSetting.BaseUrl }),\r\n    endpoints: (builder) => ({\r\n        GetDetailByCountry: builder.query<ApiResponse<CovidReportDetail>, ApiRequest<DetailByCountryRequest>>({\r\n            query: (payload) => ({\r\n                url: 'GetDetailByCountry',\r\n                method: 'post',\r\n                body: payload\r\n            }),\r\n            transformResponse(response: ApiResponse<CovidReportDetail>) {\r\n                return response;\r\n            },\r\n        }),\r\n    })\r\n});\r\n\r\nexport const { useGetDetailByCountryQuery } = GetDetailByCountry\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport './loading.css';\r\nimport Loader from 'react-loader-spinner';\r\nconst PageLoading: React.FC = () => {\r\n    return (\r\n        <div className=\"page-loading-logo\">\r\n            <div className=\"logo\">\r\n                <Loader type=\"Oval\" color=\"#74b4ff\" height=\"50\" width=\"50\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageLoading;","import React from \"react\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./spinner.css\";\r\nconst GlobalSpinner: React.FC = () => {\r\n    const { promiseInProgress } = usePromiseTracker();\r\n    return (\r\n        <>\r\n            {\r\n                promiseInProgress &&\r\n                <div className=\"spinner\">\r\n                    <Loader type=\"Oval\" color=\"#74b4ff\" height=\"50\" width=\"50\" />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GlobalSpinner;\r\n","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory();","import React, { ReactElement, Suspense, lazy } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport PageLoading from \"../components/pageLoading\";\r\nimport GlobalSpinner from \"../components/globalSpinner\";\r\nimport history from \"../utils/history\";\r\n\r\nconst Home = lazy(() => {\r\n    return Promise.all([\r\n        import(\"../views/home/\"),\r\n        new Promise(resolve => setTimeout(resolve, 20))\r\n    ])\r\n        .then(([moduleExports]) => moduleExports);\r\n});\r\nconst Country = lazy(() => {\r\n    return Promise.all([\r\n        import(\"../views/country\"),\r\n        new Promise(resolve => setTimeout(resolve, 20))\r\n    ])\r\n        .then(([moduleExports]) => moduleExports);\r\n});\r\n\r\nconst Region = lazy(() => {\r\n    return Promise.all([\r\n        import(\"../views/region\"),\r\n        new Promise(resolve => setTimeout(resolve, 20))\r\n    ])\r\n        .then(([moduleExports]) => moduleExports);\r\n});\r\n\r\nconst IndexRouter: React.FC = (): ReactElement => {\r\n    return (\r\n        <>\r\n            <Router history={history}>\r\n                <Suspense fallback={<PageLoading />}>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={Home} />\r\n                        <Route path=\"/region\" exact component={Region} />\r\n                        <Route path=\"/country\" exact component={Country} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </Router>\r\n            <GlobalSpinner />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default IndexRouter;","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../../store';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n\r\nexport interface SelectedCountryState {\r\n    value?: Covid19DataByCountry;\r\n}\r\n\r\nconst initialState: SelectedCountryState = {\r\n\r\n};\r\n\r\nexport const selectedCountrySlice = createSlice({\r\n    name: 'SelectedCountry',\r\n    initialState,\r\n    reducers: {\r\n        selectCountry: (state) => {\r\n            state.value = state.value;\r\n        },\r\n\r\n    },\r\n});\r\nexport const { selectCountry } = selectedCountrySlice.actions;\r\n\r\nexport const currentCountry = (state: RootState) => state.selectedCountry.value;\r\n\r\nexport default selectedCountrySlice.reducer;","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { GetTotalsCase } from '../services/getTotalsCase';\r\nimport { GetListCaseByRegion } from '../services/getListCaseByRegion';\r\nimport { GetDetailByRegion } from '../services/getDetailByRegion';\r\nimport { GetTopByCountry } from '../services/getTopByCountry';\r\nimport { GetCurrentCountry } from '../services/getCurrentCountry';\r\nimport { GetTotalCaseByCountry } from '../services/getTotalCaseByCountry';\r\nimport selectedCountryReducer from '../components/byCountry/selectedCountrySlice';\r\nimport { GetCountriesByRegion } from '../services/getCountriesByRegion';\r\nimport { GetDetailByCountry } from '../services/getDetailByCountry';\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        // Add the generated reducer as a specific top-level slice\r\n        [GetTotalsCase.reducerPath]: GetTotalsCase.reducer,\r\n        [GetListCaseByRegion.reducerPath]: GetListCaseByRegion.reducer,\r\n        [GetDetailByRegion.reducerPath]: GetDetailByRegion.reducer,\r\n        [GetTopByCountry.reducerPath]: GetTopByCountry.reducer,\r\n        [GetCurrentCountry.reducerPath]: GetCurrentCountry.reducer,\r\n        [GetTotalCaseByCountry.reducerPath]: GetTotalCaseByCountry.reducer,\r\n        [GetCountriesByRegion.reducerPath]: GetCountriesByRegion.reducer,\r\n        [GetDetailByCountry.reducerPath]: GetDetailByCountry.reducer,\r\n        selectedCountry: selectedCountryReducer,\r\n\r\n    },\r\n    // Adding the api middleware enables caching, invalidation, polling,\r\n    // and other useful features of `rtk-query`.\r\n    middleware: (getDefaultMiddleware) => {\r\n        return getDefaultMiddleware({ serializableCheck: false })\r\n            .concat(GetTotalsCase.middleware)\r\n            .concat(GetListCaseByRegion.middleware)\r\n            .concat(GetDetailByRegion.middleware)\r\n            .concat(GetTopByCountry.middleware)\r\n            .concat(GetCurrentCountry.middleware)\r\n            .concat(GetTotalCaseByCountry.middleware)\r\n            .concat(GetCountriesByRegion.middleware)\r\n            .concat(GetDetailByCountry.middleware);\r\n    }\r\n\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n>;\r\nsetupListeners(store.dispatch)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport Routes from './routes/';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store} >\n    <React.StrictMode>\n      <Routes />\n    </React.StrictMode >\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}