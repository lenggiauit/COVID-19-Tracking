{"version":3,"sources":["components/languageSelector/index.tsx","components/autoComplete/styles.ts","components/autoComplete/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx","components/translation/index.tsx","contexts/appContext.tsx","utils/functions.ts","locales/index.tsx"],"names":["LanguageSelector","useAppContext","locale","setLocale","handleLanguageChange","e","selectLang","target","id","window","localStorage","setItem","console","log","title","localeOptions","Object","entries","map","name","Item","onClick","baseButtonMixin","styled","div","css","ValueWrapper","input","AutoCompleteIcon","span","props","isOpen","color","fill","AutoCompleteContainer","ul","AutoCompleteItem","li","AutoCompleteItemButton","button","Input","Root","AutoComplete","data","searchHandler","useState","text","suggestions","search","setSearch","isComponentVisible","setIsComponentVisible","className","placeholder","autoComplete","value","onChange","length","regex","RegExp","sort","filter","v","test","type","item","country","avg7Case","avg7CasePop","avg7Death","avg7DeathPop","casesLast7Days","casesLast7DaysChange","casesPerHundredThousand","confirmed","countryCode","code","cumulativeConfirmed","cumulativeDeaths","deaths","deathsLast7Days","deathsLast7DaysChange","deathsPerHundredThousand","todayConfirmed","todayDeaths","updatedDate","wkCasePop","wkDeathPop","suggestionSelected","Navigation","history","useHistory","collapseOnSelect","variant","expand","Brand","href","tid","Toggle","aria-controls","Collapse","Link","countriesData","push","go","appSetting","require","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","params","Layout","children","Translation","str","args","undefined","dictionaryList","replace","match","index","AppContext","createContext","warn","useContext","AppProvider","defaultLocale","getItem","provider","Provider","bgColors","GetRandomBgColor","Math","floor","random","en","vn","KeyValues","countries"],"mappings":"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","file":"static/js/1.6a6f5378.chunk.js","sourcesContent":["import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import styled, { css } from \"styled-components\";\r\n\r\nexport const Root = styled.div`\r\n  position: relative;\r\n  width: 250px;\r\n`;\r\n\r\nexport const baseButtonMixin = css`\r\n  background: none;\r\n  border: none;\r\n  padding: 0;\r\n`;\r\n\r\nexport const ValueWrapper = styled.input`\r\n  width: 100%;\r\n  padding-left: 8px;\r\n  padding-right: 32px;\r\n  height: 32px;\r\n  box-sizing: border-box;\r\n  border-radius: 1px;\r\n  border: 1px solid #b6c1ce;\r\n  line-height: 32px;\r\n`;\r\n\r\nexport const AutoCompleteIcon = styled.span`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 32px;\r\n  width: 32px;\r\n  transition: all 150ms linear;\r\n  transform: ${(props: any) => (props.isOpen ? \"rotate(0.5turn)\" : \"none\")};\r\n  transform-origin: center;\r\n  display: flex;\r\n\r\n  svg {\r\n    margin: auto;\r\n  }\r\n\r\n  ${ValueWrapper}:focus + & {\r\n    color: ${(props: any) => props.color || \"0063cc\"};\r\n    fill: ${(props: any) => props.fill || \"0063cc\"};\r\n  }\r\n`;\r\n\r\nexport const AutoCompleteContainer = styled.ul`\r\n  background: #fff;\r\n  padding: 8px 0;\r\n  list-style-type: none;\r\n  min-width: 250px;\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  border: 1px solid #b6c1ce;\r\n  border-radius: 2px;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  max-height: 280px;\r\n  overflow-y: auto;\r\n  z-index: 1;\r\n`;\r\n\r\nexport const AutoCompleteItem = styled.li`\r\n  padding: 0 24px;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  &:hover {\r\n    background-color: #ebf4ff;\r\n  }\r\n`;\r\n\r\nexport const AutoCompleteItemButton = styled.button`\r\n  ${baseButtonMixin} width: 100%;\r\n  line-height: 32px;\r\n  text-align: left;\r\n  &:active {\r\n    outline: none;\r\n    color: #0076f5;\r\n  }\r\n`;\r\nexport const Input = styled(ValueWrapper)`\r\n  transition: border-color 150ms linear;\r\n\r\n  &:focus {\r\n    border-color: #0063cc;\r\n    outline: none;\r\n\r\n    + ${AutoCompleteIcon} {\r\n      color: ${(props: any) => props.color || \"0063cc\"};\r\n      fill: ${(props: any) => props.fill || \"0063cc\"};\r\n    }\r\n  }\r\n`;\r\n","import react, { ChangeEvent, FC, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Covid19DataByCountry } from \"../../types/covid19DataByCountry\";\r\nimport {\r\n    AutoCompleteContainer,\r\n    Input,\r\n    AutoCompleteItem,\r\n    AutoCompleteItemButton\r\n} from \"./styles\";\r\nconst Root = styled.div`\r\n  position: relative;\r\n  width: 250px;\r\n`;\r\n\r\ninterface IData {\r\n    name: string;\r\n    code: string;\r\n}\r\ninterface autoCompleteProps {\r\n    data: any[];\r\n    searchHandler(arg?: Covid19DataByCountry): void;\r\n}\r\nexport const AutoComplete: FC<autoCompleteProps> = ({\r\n    data,\r\n    searchHandler\r\n}) => {\r\n    const [search, setSearch] = useState({\r\n        text: \"\",\r\n        suggestions: []\r\n    });\r\n    const [isComponentVisible, setIsComponentVisible] = useState(true);\r\n    const onTextChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        let suggestions: any = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, \"i\");\r\n            suggestions = data.sort().filter((v: IData) => regex.test(v.name));\r\n        }\r\n        setIsComponentVisible(true);\r\n        setSearch({ suggestions, text: value });\r\n    };\r\n\r\n    const suggestionSelected = (value: IData) => {\r\n        setIsComponentVisible(false);\r\n\r\n        setSearch({\r\n            text: value.name,\r\n            suggestions: []\r\n        });\r\n        let country: Covid19DataByCountry = {\r\n            avg7Case: 0,\r\n            avg7CasePop: 0,\r\n            avg7Death: 0,\r\n            avg7DeathPop: 0,\r\n            casesLast7Days: 0,\r\n            casesLast7DaysChange: 0,\r\n            casesPerHundredThousand: 0,\r\n            confirmed: 0,\r\n            countryCode: value.code,\r\n            cumulativeConfirmed: 0,\r\n            cumulativeDeaths: 0,\r\n            deaths: 0,\r\n            deathsLast7Days: 0,\r\n            deathsLast7DaysChange: 0,\r\n            deathsPerHundredThousand: 0,\r\n            todayConfirmed: 0,\r\n            todayDeaths: 0,\r\n            updatedDate: null,\r\n            wkCasePop: 0,\r\n            wkDeathPop: 0\r\n        }\r\n\r\n        searchHandler(country);\r\n    };\r\n\r\n    const { suggestions } = search;\r\n\r\n    return (\r\n        <Root>\r\n            <div className=\"form-outline\"\r\n                onClick={() => setIsComponentVisible(false)}\r\n            />\r\n            <div>\r\n                <Input\r\n                    id=\"input\"\r\n                    placeholder=\"Search by country\"\r\n                    className=\"form-control\"\r\n                    autoComplete=\"off\"\r\n                    value={search.text}\r\n                    onChange={onTextChanged}\r\n                    type={\"text\"}\r\n                />\r\n            </div>\r\n            {suggestions.length > 0 && isComponentVisible && (\r\n                <AutoCompleteContainer >\r\n                    {suggestions.map((item: IData) => (\r\n                        <AutoCompleteItem key={item.code}>\r\n                            <AutoCompleteItemButton\r\n                                key={item.code}\r\n                                onClick={() => suggestionSelected(item)}\r\n                            >\r\n                                {item.name}\r\n                            </AutoCompleteItemButton>\r\n                        </AutoCompleteItem>\r\n                    ))}\r\n                </AutoCompleteContainer>\r\n            )}\r\n        </Root>\r\n    );\r\n};\r\n","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport { AutoComplete } from '../autoComplete';\r\nimport countriesData from \"../../locales/countries.json\";\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Navigation: React.FC = () => {\r\n    const history = useHistory();\r\n    const searchCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n        history.go(0);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <form className=\"form-inline my-1 my-lg-0\">\r\n                            <AutoComplete data={countriesData} searchHandler={searchCountryHandler} />\r\n                        </form>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport { useGetCurrentCountryQuery } from \"../services/getCurrentCountry\";\r\nimport { AppSetting } from \"../types/type\";\r\n\r\nconst bgColors = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"dark\"];\r\nexport function GetRandomBgColor() {\r\n    return bgColors[Math.floor(Math.random() * bgColors.length)];;\r\n}\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\n\r\nexport async function GetCurrentCountry() {\r\n    try {\r\n        await axios.get(appSetting.CountryViaIPUrl).then((res) => {\r\n            console.log(res.data.countryCode)\r\n            return res.data.countryCode;\r\n        });\r\n    } catch (error) {\r\n        return \"VN\";\r\n    }\r\n}","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n"],"sourceRoot":""}