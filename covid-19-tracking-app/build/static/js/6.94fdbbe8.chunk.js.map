{"version":3,"sources":["components/languageSelector/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx","types/colors.ts","components/byRegion/item.tsx","components/byRegion/index.tsx","components/byCountry/topCountryItem.tsx","store/hooks.ts","components/byCountry/topCountries.tsx","utils/converter.ts","components/informationAlert/index.tsx","components/byCurrentCountry/index.tsx","views/home/index.tsx","components/translation/index.tsx","contexts/appContext.tsx","locales/index.tsx","utils/functions.ts"],"names":["LanguageSelector","useAppContext","locale","setLocale","handleLanguageChange","e","selectLang","target","id","window","localStorage","setItem","console","log","title","localeOptions","Object","entries","map","name","Item","onClick","Navigation","collapseOnSelect","variant","expand","Brand","href","tid","Toggle","aria-controls","Collapse","Link","className","appSetting","require","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","params","Layout","children","RegionColors","RegionItem","data","max","selectedItem","style","color","regionCode","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","toLocaleLowerCase","now","uuid","colorRandom","GetRandomBgColor","Placeholder","as","animation","xs","bg","size","ByRegion","useGetListCaseByRegionQuery","error","isFetching","isLoading","useState","history","useHistory","selectedRegionHandler","item","push","Array","from","keys","i","JSON","stringify","success","resource","Math","apply","o","TopCountriesItem","handleClick","svg","width","height","KeyValues","countryCode","useAppSelector","useSelector","TopCountry","useDispatch","useGetTopByCountryQuery","state","selectedCountry","value","selectedCountryHandler","ConverterLocaleDateString","date","lang","toUpperCase","Date","toLocaleDateString","day","month","year","InformationAlert","useGetTotalsCaseQuery","updatedDate","ByCurrentCountry","cc","setDate","getDate","defaultPayload","payload","useGetTotalCaseByCountryQuery","md","cursor","query","Home","getGurrentCountry","useGetCurrentCountryQuery","isSuccess","country","Translation","props","str","args","dictionaryList","replace","match","index","AppContext","createContext","warn","useContext","AppProvider","defaultLocale","getItem","provider","Provider","en","vn","countries","bgColors","floor","random","length"],"mappings":"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","file":"static/js/6.94fdbbe8.chunk.js","sourcesContent":["import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        {/* <bt.Nav>\r\n                            <bt.Nav.Link href=\"/who\"><Translation tid=\"who\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/vaccinedata\"><Translation tid=\"vaccinedata\" /></bt.Nav.Link>\r\n                        </bt.Nav> */}\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;","import { Dictionary } from \"./type\";\r\n\r\nexport const RegionColors: Dictionary<any> = {\r\n    'AMRO': 'rgb(255, 187, 48)',\r\n    'EURO': 'rgb(200, 214, 91)',\r\n    'SEARO': 'rgb(82, 0, 174)',\r\n    'EMRO': 'rgb(0, 174, 143)',\r\n    'WPRO': 'rgb(193, 37, 146)',\r\n    'AFRO': 'rgb(10, 113, 213)',\r\n    'OTHER': 'rgb(71, 71, 71)'\r\n};\r\n","import React from 'react';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./regionItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\ntype Props = {\r\n    data?: Covid19DataByRegion;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByRegion): void;\r\n}\r\n\r\nconst RegionItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"region-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <h5 style={{ color: RegionColors[data.regionCode] }}  >\r\n                            <b><Translation tid={data.regionCode} /> </b>\r\n                        </h5>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar key={uuid()} variant={data.regionCode.toLocaleLowerCase()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (<>\r\n            <div className=\"region-item-body my-4\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <Placeholder as=\"a\" animation=\"glow\">\r\n                        <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                    </Placeholder>\r\n                    <div><b>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </b>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div></div>\r\n                    &nbsp;\r\n                    <small style={{ fontSize: 10 }}>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={7} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </small >\r\n                </div>\r\n                <Placeholder as=\"a\" animation=\"glow\">\r\n                    <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                </Placeholder>\r\n            </div>\r\n\r\n        </>)\r\n    }\r\n}\r\n\r\nexport default RegionItem;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetListCaseByRegionQuery } from '../../services/getListCaseByRegion';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport RegionItem from './item';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { uuid } from 'uuidv4';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst ByRegion: React.FC = () => {\r\n\r\n    const { data, error, isFetching, isLoading } = useGetListCaseByRegionQuery();\r\n\r\n    const [selectedRegion, setSelectedRegion] = useState<Covid19DataByRegion>();\r\n    const history = useHistory();\r\n\r\n    const selectedRegionHandler = (item: Covid19DataByRegion) => {\r\n        history.push('/region', item);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"Situation_by_WHO_Region\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <RegionItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            data?.resource.map((item) => (\r\n                                <>\r\n                                    <RegionItem key={uuid()} selectedItem={selectedRegionHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ByRegion;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"./countryItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\n\r\ntype Props = {\r\n    data?: Covid19DataByCountry;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByCountry): void;\r\n}\r\n\r\nconst TopCountriesItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                svg\r\n                                style={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em',\r\n                                }}\r\n                                title={KeyValues[\"country\"][data.countryCode]}\r\n                                countryCode={data.countryCode} />&nbsp;\r\n                            <span className=\"text-left\" >\r\n                                <b>{KeyValues[\"country\"][data.countryCode]} </b>\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar variant={GetRandomBgColor()} key={uuid()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (\r\n            <>\r\n                <>\r\n                    <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div></div>\r\n                            &nbsp;\r\n                            <small style={{ fontSize: 10 }}>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </small >\r\n                        </div>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </div>\r\n                </>\r\n            </>)\r\n    }\r\n}\r\n\r\nexport default TopCountriesItem;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '.';\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetTopByCountryQuery } from '../../services/getTopByCountry';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\nimport { uuid } from 'uuidv4';\r\nimport TopCountriesItem from './topCountryItem';\r\n//@ts-ignore\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useAppSelector, useAppDispatch } from '../../store/hooks';\r\nimport { selectCountry } from './selectedCountrySlice';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst TopCountry: React.FC = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { data, error, isFetching, isLoading } = useGetTopByCountryQuery();\r\n    const [selectedCountry, setSelectedCountry] = useState<Covid19DataByCountry>();\r\n    const count = useAppSelector(state => state.selectedCountry.value)\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col  >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"Situation_by_WHO_TopCountries\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <>\r\n                                    <TopCountriesItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            <>\r\n                                <Scrollbars style={{ height: 690 }}>\r\n\r\n                                    {data?.resource.map((item) => (\r\n                                        <>\r\n                                            <TopCountriesItem key={uuid()} selectedItem={selectedCountryHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Scrollbars>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TopCountry;","\r\nimport { useAppContext } from '../contexts/appContext';\r\n\r\n\r\nfunction ConverterLocaleDateString(date: any) {\r\n    const { locale } = useAppContext();\r\n    let lang = 'en-US';\r\n    switch (locale.toUpperCase()) {\r\n        case \"VN\":\r\n            lang = 'vi-VN';\r\n            break;\r\n        case \"US\":\r\n            lang = 'en-US';\r\n            break;\r\n    }\r\n    return (new Date(date)).toLocaleDateString(lang, { day: \"numeric\", month: \"long\", year: \"numeric\" });\r\n}\r\n\r\nexport default ConverterLocaleDateString;","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport ConverterLocaleDateString from \"../../utils/converter\";\r\nimport { useGetTotalsCaseQuery } from '../../services/getTotalsCase';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from \"../../utils/functions\";\r\n\r\nconst InformationAlert: React.FC = () => {\r\n    const { data, error, isFetching, isLoading } = useGetTotalsCaseQuery();\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <div className=\"p-1 mt-4 text-center bg-info1 bg-gradient text-white1 rounded1-1 shadow-1sm\">\r\n                        <div className=\"container-fluid py-2\">\r\n                            <p className=\"col-md-12 fs-4\">\r\n                                {(isFetching || isLoading) &&\r\n                                    <>\r\n                                        <Placeholder as=\"p\" animation=\"glow\">\r\n                                            <Placeholder xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                            <Placeholder xs={7} bg={GetRandomBgColor()} size=\"xs\" />\r\n                                        </Placeholder>\r\n                                    </>\r\n                                }\r\n                                {error && <div>{JSON.stringify(error)}</div>}\r\n                                {!error && !isFetching && data?.success && data?.resource != null &&\r\n                                    <>\r\n                                        <Translation tid=\"who_reported_desciption1\" />\r\n                                        {ConverterLocaleDateString(data?.resource.updatedDate)}\r\n                                        <Translation tid=\"who_reported_desciption2\" />\r\n                                        <span className=\"text-warning\"><b>{data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption3\" />\r\n                                        <span className=\"text-danger\"><b>{data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</b></span>\r\n                                        <Translation tid=\"who_reported_desciption4\" />\r\n                                    </>\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InformationAlert;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { GetCurrentCountry, GetRandomBgColor } from '../../utils/functions';\r\n\r\nimport { useGetCurrentCountryQuery } from '../../services/getCurrentCountry';\r\nimport { useGetTotalCaseByCountryQuery } from '../../services/getTotalCaseByCountry';\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\nimport { CurrentCountry } from '../../types/currentCountry';\r\n\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n    cc: CurrentCountry\r\n}\r\nconst ByCurrentCountry: React.FC<Props> = ({ cc }) => {\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        countryCode: cc.countryCode\r\n    };\r\n\r\n    const [payload, setPayload] = useState<DetailByCountryRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetTotalCaseByCountryQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={12} >\r\n                        {(isFetching || isLoading) &&\r\n                            <>{\r\n                                <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                                    <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                                </bt.Placeholder>\r\n                            }\r\n                            </>\r\n                        }\r\n                        {error && <div>{JSON.stringify(error)}</div>}\r\n                        {!error && !isFetching && data?.success && data?.resource != null &&\r\n                            <>\r\n                                <div className=\"d-flex justify-content-between p-3 my-3 text-white bg-info rounded shadow-sm\" style={{ cursor: \"pointer\" }}\r\n                                    onClick={() => selectedCountryHandler(data?.resource)}>\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <ReactCountryFlag className=\"emojiFlag\"\r\n                                            svg\r\n                                            style={{\r\n                                                width: '3em',\r\n                                                height: '3em',\r\n                                            }}\r\n                                            title={KeyValues[\"country\"][data?.resource.countryCode]}\r\n                                            countryCode={data?.resource.countryCode} />&nbsp;\r\n\r\n\r\n                                        <div className=\"lh-1  ml-3\">\r\n                                            <h1 className=\"h4 mb-0 text-white lh-1\">{KeyValues[\"country\"][data?.resource.countryCode]}</h1>\r\n                                            <small>IP: {cc.query}</small>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <b><span className=\"text-warning\">\r\n                                            {data?.resource.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                            /\r\n                                            <span className=\"text-danger\"> {data?.resource.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                            (<span>{((data?.resource.deaths / data?.resource.confirmed) * 100).toFixed(2)} %</span>)\r\n                                        </b>\r\n                                        <div>\r\n                                            &nbsp;\r\n                                            <small style={{ fontSize: 12 }}>\r\n                                                <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                                            </small >\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default ByCurrentCountry;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport ByRegion from '../../components/byRegion';\r\nimport TopCountry from '../../components/byCountry/topCountries';\r\nimport InformationAlert from '../../components/informationAlert';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { useGetCurrentCountryQuery } from '../../services/getCurrentCountry';\r\nimport { CurrentCountry } from '../../types/currentCountry';\r\nimport ByCurrentCountry from '../../components/byCurrentCountry';\r\n\r\nconst Home: React.FC = (): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    const getGurrentCountry = useGetCurrentCountryQuery();\r\n\r\n    const defaultCountry: CurrentCountry = {\r\n        country: \"VN\",\r\n        countryCode: \"VN\",\r\n        query: \"127.0.0.1\",\r\n    };\r\n    return (\r\n        <Layout>\r\n            <InformationAlert />\r\n            {getGurrentCountry.isSuccess && getGurrentCountry.data && (\r\n                <ByCurrentCountry cc={getGurrentCountry.data} />\r\n            )\r\n            }\r\n            {!getGurrentCountry.isSuccess && !getGurrentCountry.data && (\r\n                <ByCurrentCountry cc={defaultCountry} />\r\n            )\r\n            }\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col md={6}>\r\n                        <ByRegion />\r\n                    </bt.Col>\r\n                    <bt.Col md={6}>\r\n                        <TopCountry />\r\n                    </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport default Home;","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n","import axios from \"axios\";\r\nimport { useGetCurrentCountryQuery } from \"../services/getCurrentCountry\";\r\nimport { AppSetting } from \"../types/type\";\r\n\r\nconst bgColors = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"dark\"];\r\nexport function GetRandomBgColor() {\r\n    return bgColors[Math.floor(Math.random() * bgColors.length)];;\r\n}\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\n\r\nexport async function GetCurrentCountry() {\r\n    try {\r\n        await axios.get(appSetting.CountryViaIPUrl).then((res) => {\r\n            console.log(res.data.countryCode)\r\n            return res.data.countryCode;\r\n        });\r\n    } catch (error) {\r\n        return \"VN\";\r\n    }\r\n}"],"sourceRoot":""}