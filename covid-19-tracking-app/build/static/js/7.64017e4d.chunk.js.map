{"version":3,"sources":["components/languageSelector/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx","types/colors.ts","components/pageNotFound/index.tsx","components/byRegion/detailLoading.tsx","components/listCountriesByRegion/countryItem.tsx","components/listCountriesByRegion/index.tsx","components/byRegion/detail.tsx","views/region/index.tsx","components/translation/index.tsx","contexts/appContext.tsx","locales/index.tsx","utils/functions.ts"],"names":["LanguageSelector","useAppContext","locale","setLocale","handleLanguageChange","e","selectLang","target","id","window","localStorage","setItem","console","log","title","localeOptions","Object","entries","map","name","Item","onClick","Navigation","collapseOnSelect","variant","expand","Brand","href","tid","Toggle","aria-controls","Collapse","Link","className","appSetting","require","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","params","Layout","children","RegionColors","PageNotFound","DetailLoading","lineCount","Array","from","keys","i","as","animation","xs","bg","GetRandomBgColor","size","uuid","CountryItem","data","max","selectedItem","handleClick","svg","style","width","height","KeyValues","countryCode","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","now","colorRandom","Placeholder","ListCountriesByRegion","defaultPayload","regionCode","region","useState","payload","useGetCountriesByRegionQuery","error","isFetching","isLoading","history","useHistory","selectedCountryHandler","item","push","JSON","stringify","success","resource","Math","apply","o","RegionDetail","selectedItemData","start","Date","setDate","getDate","startDate","endDate","selectedHandler","type","setMonth","getMonth","setFullYear","getFullYear","setPayload","useGetDetailByRegionQuery","md","color","role","htmlFor","labels","covidReportByDay","reportDate","toLocaleDateString","datasets","label","dictionaryList","totalConfirmed","fill","borderColor","totalDeaths","vaccineReport","personFullyVaccinated","personVaccinated1PlusDose","vaccinesUsed","Region","props","state","useLocation","Translation","str","args","replace","match","index","AppContext","createContext","warn","useContext","AppProvider","defaultLocale","getItem","provider","Provider","value","en","vn","countries","bgColors","floor","random","length"],"mappings":"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","file":"static/js/7.64017e4d.chunk.js","sourcesContent":["import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        {/* <bt.Nav>\r\n                            <bt.Nav.Link href=\"/who\"><Translation tid=\"who\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/vaccinedata\"><Translation tid=\"vaccinedata\" /></bt.Nav.Link>\r\n                        </bt.Nav> */}\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;","import { Dictionary } from \"./type\";\r\n\r\nexport const RegionColors: Dictionary<any> = {\r\n    'AMRO': 'rgb(255, 187, 48)',\r\n    'EURO': 'rgb(200, 214, 91)',\r\n    'SEARO': 'rgb(82, 0, 174)',\r\n    'EMRO': 'rgb(0, 174, 143)',\r\n    'WPRO': 'rgb(193, 37, 146)',\r\n    'AFRO': 'rgb(10, 113, 213)',\r\n    'OTHER': 'rgb(71, 71, 71)'\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\nimport { Translation } from '../translation';\r\n\r\n\r\nconst PageNotFound: React.FC = (): ReactElement => {\r\n    return (\r\n        <>\r\n            <div className=\"px-4 py-5 my-5 text-center\">\r\n                <h1 className=\"mt-5\"><Translation tid=\"page_not_found\" /></h1>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n","import React from 'react';\r\nimport { Placeholder } from 'react-bootstrap';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { uuid } from 'uuidv4';\r\n\r\ntype Props = {\r\n    lineCount?: number;\r\n}\r\nconst DetailLoading: React.FC<Props> = ({ lineCount }) => {\r\n    return (\r\n        <>{\r\n            Array.from(Array(lineCount != null ? lineCount : 1).keys()).map((i) => (\r\n                <Placeholder key={uuid()} as=\"p\" animation=\"glow\">\r\n                    <Placeholder key={uuid()} xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                </Placeholder>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailLoading;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"../byCountry/countryItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\n\r\ntype Props = {\r\n    data?: Covid19DataByCountry;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByCountry): void;\r\n}\r\n\r\nconst CountryItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                svg\r\n                                style={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em',\r\n                                }}\r\n                                title={KeyValues[\"country\"][data.countryCode]}\r\n                                countryCode={data.countryCode} />&nbsp;\r\n                            <span className=\"text-left\" >\r\n                                <b>{KeyValues[\"country\"][data.countryCode]} </b>\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar variant={GetRandomBgColor()} key={uuid()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (\r\n            <>\r\n                <>\r\n                    <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div></div>\r\n                            &nbsp;\r\n                            <small style={{ fontSize: 10 }}>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </small >\r\n                        </div>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </div>\r\n                </>\r\n            </>)\r\n    }\r\n}\r\n\r\nexport default CountryItem;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetTopByCountryQuery } from '../../services/getTopByCountry';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\nimport { uuid } from 'uuidv4';\r\n//@ts-ignore\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CountryItem from './countryItem';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { useGetCountriesByRegionQuery } from '../../services/getCountriesByRegion';\r\nimport { CovidReportDetailRequest } from '../../types/covidReportDetailRequest';\r\n\r\ntype Props = {\r\n    region: Covid19DataByRegion\r\n}\r\nconst ListCountriesByRegion: React.FC<Props> = ({ region }) => {\r\n\r\n\r\n    const defaultPayload = {\r\n        regionCode: region.regionCode\r\n    };\r\n\r\n    const [payload, setPayload] = useState<CovidReportDetailRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetCountriesByRegionQuery({ payload: payload });\r\n\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col  >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"CountriesList\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <>\r\n                                    <CountryItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            <>\r\n                                <Scrollbars style={{ height: 690 }}>\r\n\r\n                                    {data?.resource.map((item) => (\r\n                                        <>\r\n                                            <CountryItem key={uuid()} selectedItem={selectedCountryHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Scrollbars>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListCountriesByRegion;","import React, { useRef, useState } from 'react';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport \"./regionItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { RegionColors } from '../../types/colors';\r\nimport { dictionaryList, localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { useGetDetailByRegionQuery } from '../../services/getDetailByRegion';\r\nimport DetailLoading from './detailLoading';\r\nimport { CovidReportDetailRequest } from '../../types/covidReportDetailRequest';\r\nimport { uuid } from 'uuidv4';\r\nimport * as bt from 'react-bootstrap';\r\nimport ListCountriesByRegion from '../listCountriesByRegion';\r\n\r\ntype Props = {\r\n    selectedItemData: Covid19DataByRegion;\r\n}\r\n\r\nconst RegionDetail: React.FC<Props> = ({ selectedItemData }) => {\r\n    const { locale, } = useAppContext();\r\n\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        regionCode: selectedItemData.regionCode,\r\n        startDate: start,\r\n        endDate: new Date(),\r\n    };\r\n\r\n    const selectedHandler = (type: string) => {\r\n        let start = new Date();\r\n        switch (type) {\r\n            case \"Weekly\":\r\n                start.setDate(new Date().getDate() - 7)\r\n                break;\r\n            case \"Monthly\":\r\n                start.setMonth(new Date().getMonth() - 1)\r\n                break;\r\n            case \"Yearly\":\r\n                start.setFullYear(new Date().getFullYear() - 1)\r\n                break;\r\n        }\r\n        const payload = {\r\n            regionCode: selectedItemData.regionCode,\r\n            startDate: start,\r\n            endDate: new Date(),\r\n        };\r\n        setPayload(payload);\r\n    };\r\n\r\n    const [payload, setPayload] = useState<CovidReportDetailRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetDetailByRegionQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            {selectedItemData && (\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <bt.Col md={8} >\r\n                            <h3 className=\"mt-3 \" style={{ color: RegionColors[selectedItemData?.regionCode] }}  >\r\n                                <b><Translation tid={selectedItemData?.regionCode} />&nbsp;<Translation tid=\"detail\" /></b>\r\n                            </h3>\r\n                        </bt.Col>\r\n                        <bt.Col md={4} >\r\n                            <div className=\"mt-4 text-right\"  >\r\n                                <b><span className=\"text-warning\">\r\n                                    {selectedItemData.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                    /\r\n                                    <span className=\"text-danger\"> {selectedItemData.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                    (<span>{((selectedItemData.deaths / selectedItemData.confirmed) * 100).toFixed(2)} %</span>)\r\n                                </b>\r\n                            </div>\r\n                        </bt.Col>\r\n                    </bt.Row>\r\n                    <hr />\r\n                    <bt.Row>\r\n                        <bt.Col md={4} >\r\n                            <ListCountriesByRegion region={selectedItemData} />\r\n                        </bt.Col>\r\n\r\n                        <bt.Col md={8} >\r\n                            <div className=\"position-relative\">\r\n                                <div className=\"float-right\" style={{ width: 200 }}>\r\n                                    <div className=\"btn-group btn-group-sm\" role=\"group\"  >\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" onClick={() => { selectedHandler('Weekly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio1\">Weekly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" onClick={() => { selectedHandler('Monthly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\">Monthly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio3\" onClick={() => { selectedHandler('Yearly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio3\">Yearly</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {(isFetching || isLoading) && <DetailLoading key={uuid()} lineCount={16} />}\r\n                            {error && <div>{JSON.stringify(error)}</div>}\r\n                            {!error && !isFetching && data?.success && data?.resource != null &&\r\n                                <>\r\n\r\n                                    <div className=\"position-relative\">\r\n                                        <div className=\"text-center\" >\r\n                                            <div style={{ width: \"100%\", height: 420 }}>\r\n                                                <Line data={{\r\n                                                    labels: data.resource.covidReportByDay.map((i) => new Date(i.reportDate).toLocaleDateString(locale)),\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Confirmed\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalConfirmed),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f7c50c\"\r\n                                                        },\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Deaths\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalDeaths),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f70c0c\"\r\n                                                        }\r\n                                                    ]\r\n                                                }} key={uuid()} />\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div className=\"mt-3\">\r\n                                                <b><Translation tid=\"PersonFullyVaccinated\" />: &nbsp;\r\n                                                    {\r\n\r\n                                                        data?.resource.vaccineReport.personFullyVaccinated.toLocaleString(undefined, { maximumFractionDigits: 0 })\r\n\r\n                                                    }\r\n                                                </b>\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                                <b><Translation tid=\"PersonVaccinated1PlusDose\" />: &nbsp;\r\n                                                    {\r\n\r\n                                                        data?.resource.vaccineReport.personVaccinated1PlusDose.toLocaleString(undefined, { maximumFractionDigits: 0 })\r\n\r\n                                                    }\r\n                                                </b>\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                                <b><Translation tid=\"vaccinesUsed\" /></b>: &nbsp;\r\n                                                {\r\n                                                    data?.resource.vaccineReport.vaccinesUsed\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </bt.Col>\r\n                    </bt.Row>\r\n\r\n                </bt.Container>\r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegionDetail;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { useLocation } from 'react-router-dom';\r\nimport PageNotFound from '../../components/pageNotFound';\r\nimport RegionDetail from '../../components/byRegion/detail';\r\ninterface RouteParams {\r\n    regiondata: Covid19DataByRegion\r\n}\r\n\r\n\r\nconst Region: React.FC<RouteParams> = (props): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    const { state } = useLocation<Covid19DataByRegion>();\r\n    if (state) {\r\n        return (\r\n            <Layout>\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <RegionDetail selectedItemData={state} />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n            </Layout>\r\n        )\r\n    } else {\r\n        return (\r\n            <Layout>\r\n                <PageNotFound />\r\n            </Layout>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Region;","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n","import axios from \"axios\";\r\nimport { useGetCurrentCountryQuery } from \"../services/getCurrentCountry\";\r\nimport { AppSetting } from \"../types/type\";\r\n\r\nconst bgColors = [\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"dark\"];\r\nexport function GetRandomBgColor() {\r\n    return bgColors[Math.floor(Math.random() * bgColors.length)];;\r\n}\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\n\r\nexport async function GetCurrentCountry() {\r\n    try {\r\n        await axios.get(appSetting.CountryViaIPUrl).then((res) => {\r\n            console.log(res.data.countryCode)\r\n            return res.data.countryCode;\r\n        });\r\n    } catch (error) {\r\n        return \"VN\";\r\n    }\r\n}"],"sourceRoot":""}