{"version":3,"sources":["types/colors.ts","components/pageNotFound/index.tsx","components/byRegion/detailLoading.tsx","components/listCountriesByRegion/countryItem.tsx","components/listCountriesByRegion/index.tsx","components/byRegion/detail.tsx","views/region/index.tsx"],"names":["RegionColors","PageNotFound","className","tid","DetailLoading","lineCount","Array","from","keys","map","i","as","animation","xs","bg","GetRandomBgColor","size","uuid","CountryItem","data","max","selectedItem","handleClick","onClick","svg","style","width","height","title","KeyValues","countryCode","confirmed","toLocaleString","undefined","maximumFractionDigits","deaths","toFixed","fontSize","variant","now","colorRandom","Placeholder","ListCountriesByRegion","defaultPayload","regionCode","region","useState","payload","useGetCountriesByRegionQuery","error","isFetching","isLoading","history","useHistory","selectedCountryHandler","item","push","JSON","stringify","success","resource","Math","apply","o","RegionDetail","selectedItemData","locale","useAppContext","start","Date","setDate","getDate","startDate","endDate","selectedHandler","type","setMonth","getMonth","setFullYear","getFullYear","setPayload","useGetDetailByRegionQuery","md","color","role","name","id","htmlFor","labels","covidReportByDay","reportDate","toLocaleDateString","datasets","label","dictionaryList","totalConfirmed","fill","borderColor","totalDeaths","vaccineReport","personFullyVaccinated","personVaccinated1PlusDose","vaccinesUsed","Region","props","state","setLocale","appSetting","useLocation"],"mappings":"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","file":"static/js/8.2c4eb880.chunk.js","sourcesContent":["import { Dictionary } from \"./type\";\r\n\r\nexport const RegionColors: Dictionary<any> = {\r\n    'AMRO': 'rgb(255, 187, 48)',\r\n    'EURO': 'rgb(200, 214, 91)',\r\n    'SEARO': 'rgb(82, 0, 174)',\r\n    'EMRO': 'rgb(0, 174, 143)',\r\n    'WPRO': 'rgb(193, 37, 146)',\r\n    'AFRO': 'rgb(10, 113, 213)',\r\n    'OTHER': 'rgb(71, 71, 71)'\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\nimport { Translation } from '../translation';\r\n\r\n\r\nconst PageNotFound: React.FC = (): ReactElement => {\r\n    return (\r\n        <>\r\n            <div className=\"px-4 py-5 my-5 text-center\">\r\n                <h1 className=\"mt-5\"><Translation tid=\"page_not_found\" /></h1>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n","import React from 'react';\r\nimport { Placeholder } from 'react-bootstrap';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { uuid } from 'uuidv4';\r\n\r\ntype Props = {\r\n    lineCount?: number;\r\n}\r\nconst DetailLoading: React.FC<Props> = ({ lineCount }) => {\r\n    return (\r\n        <>{\r\n            Array.from(Array(lineCount != null ? lineCount : 1).keys()).map((i) => (\r\n                <Placeholder key={uuid()} as=\"p\" animation=\"glow\">\r\n                    <Placeholder key={uuid()} xs={12} bg={GetRandomBgColor()} size=\"xs\" />\r\n                </Placeholder>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DetailLoading;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport \"../byCountry/countryItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { RegionColors } from '../../types/colors';\r\nimport { uuid } from 'uuidv4';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n//@ts-ignore\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { KeyValues } from '../../locales/';\r\n\r\ntype Props = {\r\n    data?: Covid19DataByCountry;\r\n    max: number;\r\n    selectedItem(arg?: Covid19DataByCountry): void;\r\n}\r\n\r\nconst CountryItem: React.FC<Props> = ({ data, max, selectedItem }) => {\r\n\r\n    const handleClick = () => {\r\n        selectedItem(data)!;\r\n    }\r\n    if (data != null) {\r\n        return (\r\n            <>\r\n                <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            <ReactCountryFlag className=\"emojiFlag\"\r\n                                svg\r\n                                style={{\r\n                                    width: '1.2em',\r\n                                    height: '1.2em',\r\n                                }}\r\n                                title={KeyValues[\"country\"][data.countryCode]}\r\n                                countryCode={data.countryCode} />&nbsp;\r\n                            <span className=\"text-left\" >\r\n                                <b>{KeyValues[\"country\"][data.countryCode]} </b>\r\n                            </span>\r\n                        </div>\r\n                        <div>\r\n                            <b><span className=\"text-warning\">\r\n                                {data.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                /\r\n                                <span className=\"text-danger\"> {data.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                (<span>{((data.deaths / data.confirmed) * 100).toFixed(2)} %</span>)\r\n                            </b>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div></div>\r\n                        &nbsp;\r\n                        <small style={{ fontSize: 10 }}>\r\n                            <Translation tid=\"Confirmed\" /> / <Translation tid=\"Deaths\" />\r\n                        </small >\r\n                    </div>\r\n                    <bt.ProgressBar variant={GetRandomBgColor()} key={uuid()} now={data.confirmed == max ? 100 : (data.confirmed / max) * 100} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    else {\r\n        const colorRandom = GetRandomBgColor();\r\n        return (\r\n            <>\r\n                <>\r\n                    <div className=\"country-item-body my-4\" onClick={handleClick}>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n                            <div>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div></div>\r\n                            &nbsp;\r\n                            <small style={{ fontSize: 10 }}>\r\n                                <Placeholder as=\"a\" animation=\"glow\">\r\n                                    <Placeholder xs={2} bg={colorRandom} size=\"sm\" />\r\n                                </Placeholder>\r\n                            </small >\r\n                        </div>\r\n                        <Placeholder as=\"a\" animation=\"glow\">\r\n                            <Placeholder xs={12} bg={colorRandom} size=\"sm\" />\r\n                        </Placeholder>\r\n                    </div>\r\n                </>\r\n            </>)\r\n    }\r\n}\r\n\r\nexport default CountryItem;","import React, { useState, useCallback } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { useGetTopByCountryQuery } from '../../services/getTopByCountry';\r\nimport LocalSpinner from \"../localSpinner\";\r\nimport { GetRandomBgColor } from '../../utils/functions';\r\nimport { Covid19DataByCountry, DetailByCountryRequest } from '../../types/covid19DataByCountry';\r\nimport { uuid } from 'uuidv4';\r\n//@ts-ignore\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CountryItem from './countryItem';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { useGetCountriesByRegionQuery } from '../../services/getCountriesByRegion';\r\nimport { CovidReportDetailRequest } from '../../types/covidReportDetailRequest';\r\n\r\ntype Props = {\r\n    region: Covid19DataByRegion\r\n}\r\nconst ListCountriesByRegion: React.FC<Props> = ({ region }) => {\r\n\r\n\r\n    const defaultPayload = {\r\n        regionCode: region.regionCode\r\n    };\r\n\r\n    const [payload, setPayload] = useState<CovidReportDetailRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetCountriesByRegionQuery({ payload: payload });\r\n\r\n    const history = useHistory();\r\n    const selectedCountryHandler = (item: Covid19DataByCountry) => {\r\n        history.push('/country', item);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <bt.Row>\r\n                <bt.Col  >\r\n\r\n                    {(isFetching || isLoading) && (\r\n                        <bt.Placeholder as=\"a\" animation=\"glow\">\r\n                            <bt.Placeholder xs={5} bg={GetRandomBgColor()} size=\"lg\" />\r\n                        </bt.Placeholder>)}\r\n                    {!error && !isFetching && <h5> <Translation tid=\"CountriesList\" /> </h5>}\r\n\r\n                </bt.Col>\r\n            </bt.Row>\r\n            <bt.Row>\r\n                <bt.Col >\r\n                    {(isFetching || isLoading) &&\r\n                        <>{\r\n                            Array.from(Array(7).keys()).map((i) => (\r\n                                <>\r\n                                    <CountryItem key={uuid()} max={1} selectedItem={() => { }} />\r\n                                </>\r\n                            ))\r\n                        }\r\n                        </>\r\n                    }\r\n                    {error && <div>{JSON.stringify(error)}</div>}\r\n                    {!error && !isFetching && data?.success && data?.resource != null &&\r\n                        <> {\r\n                            <>\r\n                                <Scrollbars style={{ height: 690 }}>\r\n\r\n                                    {data?.resource.map((item) => (\r\n                                        <>\r\n                                            <CountryItem key={uuid()} selectedItem={selectedCountryHandler} data={item} max={Math.max.apply(Math, data?.resource.map(function (o) { return o.confirmed; }))} />\r\n                                        </>\r\n                                    ))}\r\n\r\n                                </Scrollbars>\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                </bt.Col>\r\n            </bt.Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListCountriesByRegion;","import React, { useRef, useState } from 'react';\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport \"./regionItem.css\";\r\nimport { Translation } from '../translation';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { RegionColors } from '../../types/colors';\r\nimport { dictionaryList, localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { useGetDetailByRegionQuery } from '../../services/getDetailByRegion';\r\nimport DetailLoading from './detailLoading';\r\nimport { CovidReportDetailRequest } from '../../types/covidReportDetailRequest';\r\nimport { uuid } from 'uuidv4';\r\nimport * as bt from 'react-bootstrap';\r\nimport ListCountriesByRegion from '../listCountriesByRegion';\r\n\r\ntype Props = {\r\n    selectedItemData: Covid19DataByRegion;\r\n}\r\n\r\nconst RegionDetail: React.FC<Props> = ({ selectedItemData }) => {\r\n    const { locale, } = useAppContext();\r\n\r\n    let start = new Date();\r\n    start.setDate(new Date().getDate() - 7)\r\n    const defaultPayload = {\r\n        regionCode: selectedItemData.regionCode,\r\n        startDate: start,\r\n        endDate: new Date(),\r\n    };\r\n\r\n    const selectedHandler = (type: string) => {\r\n        let start = new Date();\r\n        switch (type) {\r\n            case \"Weekly\":\r\n                start.setDate(new Date().getDate() - 7)\r\n                break;\r\n            case \"Monthly\":\r\n                start.setMonth(new Date().getMonth() - 1)\r\n                break;\r\n            case \"Yearly\":\r\n                start.setFullYear(new Date().getFullYear() - 1)\r\n                break;\r\n        }\r\n        const payload = {\r\n            regionCode: selectedItemData.regionCode,\r\n            startDate: start,\r\n            endDate: new Date(),\r\n        };\r\n        setPayload(payload);\r\n    };\r\n\r\n    const [payload, setPayload] = useState<CovidReportDetailRequest>(defaultPayload);\r\n    const { data, error, isFetching, isLoading } = useGetDetailByRegionQuery({ payload: payload });\r\n\r\n    return (\r\n        <>\r\n            {selectedItemData && (\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <bt.Col md={8} >\r\n                            <h3 className=\"mt-3 \" style={{ color: RegionColors[selectedItemData?.regionCode] }}  >\r\n                                <b><Translation tid={selectedItemData?.regionCode} />&nbsp;<Translation tid=\"detail\" /></b>\r\n                            </h3>\r\n                        </bt.Col>\r\n                        <bt.Col md={4} >\r\n                            <div className=\"mt-4 text-right\"  >\r\n                                <b><span className=\"text-warning\">\r\n                                    {selectedItemData.confirmed.toLocaleString(undefined, { maximumFractionDigits: 0 })} </span>\r\n                                    /\r\n                                    <span className=\"text-danger\"> {selectedItemData.deaths.toLocaleString(undefined, { maximumFractionDigits: 0 })}</span>&nbsp;\r\n                                    (<span>{((selectedItemData.deaths / selectedItemData.confirmed) * 100).toFixed(2)} %</span>)\r\n                                </b>\r\n                            </div>\r\n                        </bt.Col>\r\n                    </bt.Row>\r\n                    <hr />\r\n                    <bt.Row>\r\n                        <bt.Col md={4} >\r\n                            <ListCountriesByRegion region={selectedItemData} />\r\n                        </bt.Col>\r\n\r\n                        <bt.Col md={8} >\r\n                            <div className=\"position-relative\">\r\n                                <div className=\"float-right\" style={{ width: 200 }}>\r\n                                    <div className=\"btn-group btn-group-sm\" role=\"group\"  >\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio1\" onClick={() => { selectedHandler('Weekly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio1\">Weekly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio2\" onClick={() => { selectedHandler('Monthly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio2\">Monthly</label>\r\n\r\n                                        <input type=\"radio\" className=\"btn-check\" name=\"btnradio\" id=\"btnradio3\" onClick={() => { selectedHandler('Yearly') }} />\r\n                                        <label className=\"btn btn-outline-primary\" htmlFor=\"btnradio3\">Yearly</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {(isFetching || isLoading) && <DetailLoading key={uuid()} lineCount={16} />}\r\n                            {error && <div>{JSON.stringify(error)}</div>}\r\n                            {!error && !isFetching && data?.success && data?.resource != null &&\r\n                                <>\r\n\r\n                                    <div className=\"position-relative\">\r\n                                        <div className=\"text-center\" >\r\n                                            <div style={{ width: \"100%\", height: 420 }}>\r\n                                                <Line data={{\r\n                                                    labels: data.resource.covidReportByDay.map((i) => new Date(i.reportDate).toLocaleDateString(locale)),\r\n                                                    datasets: [\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Confirmed\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalConfirmed),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f7c50c\"\r\n                                                        },\r\n                                                        {\r\n                                                            label: dictionaryList[locale][\"Deaths\"],\r\n                                                            data: data.resource.covidReportByDay.map((i) => i.totalDeaths),\r\n                                                            fill: false,\r\n                                                            borderColor: \"#f70c0c\"\r\n                                                        }\r\n                                                    ]\r\n                                                }} key={uuid()} />\r\n\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <div className=\"mt-3\">\r\n                                                <b><Translation tid=\"PersonFullyVaccinated\" />: &nbsp;\r\n                                                    {\r\n\r\n                                                        data?.resource.vaccineReport.personFullyVaccinated.toLocaleString(undefined, { maximumFractionDigits: 0 })\r\n\r\n                                                    }\r\n                                                </b>\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                                <b><Translation tid=\"PersonVaccinated1PlusDose\" />: &nbsp;\r\n                                                    {\r\n\r\n                                                        data?.resource.vaccineReport.personVaccinated1PlusDose.toLocaleString(undefined, { maximumFractionDigits: 0 })\r\n\r\n                                                    }\r\n                                                </b>\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                                <b><Translation tid=\"vaccinesUsed\" /></b>: &nbsp;\r\n                                                {\r\n                                                    data?.resource.vaccineReport.vaccinesUsed\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </>\r\n                            }\r\n                        </bt.Col>\r\n                    </bt.Row>\r\n\r\n                </bt.Container>\r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegionDetail;","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Covid19DataByRegion } from '../../types/covid19DataByRegion';\r\nimport { useLocation } from 'react-router-dom';\r\nimport PageNotFound from '../../components/pageNotFound';\r\nimport RegionDetail from '../../components/byRegion/detail';\r\ninterface RouteParams {\r\n    regiondata: Covid19DataByRegion\r\n}\r\n\r\n\r\nconst Region: React.FC<RouteParams> = (props): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    const { state } = useLocation<Covid19DataByRegion>();\r\n    if (state) {\r\n        return (\r\n            <Layout>\r\n                <bt.Container>\r\n                    <bt.Row>\r\n                        <RegionDetail selectedItemData={state} />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n            </Layout>\r\n        )\r\n    } else {\r\n        return (\r\n            <Layout>\r\n                <PageNotFound />\r\n            </Layout>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Region;"],"sourceRoot":""}