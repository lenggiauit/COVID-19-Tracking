{"version":3,"sources":["views/country/index.tsx","contexts/appContext.tsx","components/translation/index.tsx","locales/index.tsx","components/languageSelector/index.tsx","components/navigation/index.tsx","components/environmentInfo/index.tsx","components/layout/index.tsx"],"names":["Who","useAppContext","locale","setLocale","appSetting","useState","require","AppContext","createContext","console","warn","useContext","AppProvider","children","defaultLocale","window","localStorage","getItem","provider","Provider","value","Translation","props","str","args","tid","params","undefined","dictionaryList","replace","match","index","en","vn","localeOptions","KeyValues","countries","LanguageSelector","handleLanguageChange","e","selectLang","target","id","setItem","log","title","Object","entries","map","name","Item","onClick","Navigation","collapseOnSelect","variant","expand","Brand","href","Toggle","Collapse","Link","className","EnvironmentInfo","process","toLocaleUpperCase","ForceHideEnvironment","Layout"],"mappings":"kNAuBeA,UAfO,WAClB,MAA0CC,cAE1C,GAFA,EAAQC,OAAR,EAAgBC,UAAhB,EAA2BC,WAEmBC,sBAA9C,6BACA,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,0C,8HCbhBD,EAAyBE,EAAQ,IAQxBC,EAAaC,wBAA8B,CACpDN,OAAQ,KACRC,UAAW,SAAAD,GAAM,OAAIO,QAAQC,KAAK,uBAClCN,WAAYA,IAGHH,EAAgB,kBAAMU,qBAAWJ,IAEjCK,EAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9BC,EAAgBC,OAAOC,aAAaC,QAAQ,0BAClD,EAA4BZ,mBAAiBS,GAAiB,MAA9D,mBAEMI,EAAW,CACbhB,OAHJ,KAIIC,UAJJ,KAKIC,cAEJ,OACI,mCACI,cAACG,EAAWY,SAAZ,CAAqBC,MAAOF,EAA5B,SACKL,Q,gCC/BjB,2DAWaQ,GAXb,KAW4C,SAACC,GACzC,IAJkBC,EAAaC,EAIvBtB,EAAWD,cAAXC,OACAuB,EAAgBH,EAAhBG,IAAKC,EAAWJ,EAAXI,OACb,YAAcC,GAAVD,GANcH,EAOOK,IAAe1B,GAAQuB,IAAQA,EAPzBD,EAO+BE,EAN9DH,EAAIM,QAAQ,YAAY,SAACC,EAAOC,GAAR,OAAkBP,EAAKO,IAAU,OAQ7CH,IAAe1B,GAAQuB,IAAQA,K,gCChB/C,kIAGaG,EAAkC,CAAE,GAAMI,EAAI,GAAMC,GACpDC,EAAiC,CAC1CF,GAAI,UACJC,GAAI,wBAGKE,EAA6B,CAAE,QAAWC,I,utOCL1CC,EAA6B,WACtC,MAA8BpC,cAAtBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UACVmC,EAAmE,SAACC,GACtE,IAAIC,EAAcD,EAAEE,OAA6BC,GACjD3B,OAAOC,aAAa2B,QAAQ,yBAA0BH,GACtDrC,EAAUqC,GACV/B,QAAQmC,IAAIJ,IAEhB,OACI,mCACI,cAAC,IAAD,CAAgBK,MAAOX,IAAchC,GAASwC,GAAG,mBAAjD,SACKI,OAAOC,QAAQb,KAAec,KAAI,mCAAEN,EAAF,KAAMO,EAAN,YAC/B,cAAC,IAAeC,KAAhB,CAA8BR,GAAIA,EAAIS,QAASb,EAA/C,SAAsEW,GAA5CP,WCe/BU,EA1Bc,WACzB,OACI,mCACI,cAAC,IAAD,CAAWC,kBAAgB,EAACC,QAAQ,QAAQC,OAAO,KAAnD,SACI,eAAC,IAAD,WACI,cAAC,IAAUC,MAAX,CAAiBC,KAAK,IAAtB,SAA0B,cAAC,IAAD,CAAahC,IAAI,gBAC3C,cAAC,IAAUiC,OAAX,CAAkB,gBAAc,0BAChC,eAAC,IAAUC,SAAX,CAAoBjB,GAAG,wBAAvB,UACI,cAAC,IAAD,UACI,cAAC,IAAOkB,KAAR,CAAaH,KAAK,IAAlB,SAAsB,cAAC,IAAD,CAAahC,IAAI,aAQ3C,cAAC,IAAD,CAAQoC,UAAU,YAClB,cAAC,EAAD,e,SCnBpBzD,EAAyBE,EAAQ,IAgBtBwD,EAbmB,WAC9B,MAAgD,eAA5CC,aAAqBC,qBAAyC5D,EAAW6D,qBAQjE,6BANJ,cAAE,IAAF,CAAWX,QAAQ,OAAnB,SACI,gCAAO,cAAC,IAAD,CAAa7B,IAAI,0BAA0BC,OAAQ,CAACqC,aAAqBC,4BCWjFE,IAhBU,SAAC,GAAgC,IAA9BrD,EAA6B,EAA7BA,SACxB,OACI,mCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAcgD,UAAU,4BAAxB,SACI,eAAC,IAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,SAGPhD","file":"static/js/6.436c6acb.chunk.js","sourcesContent":["import React, { ReactElement, useState } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Layout from '../../components/layout';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport { currentCountry } from '../../components/byCountry/selectedCountrySlice';\r\nimport { useAppSelector } from '../../store/hooks';\r\nimport { Covid19DataByCountry } from '../../types/covid19DataByCountry';\r\n\r\nconst Who: React.FC = (): ReactElement => {\r\n    const { locale, setLocale, appSetting } = useAppContext();\r\n    // const count = useAppSelector(currentCountry);\r\n    const [selectedCountry, setSelectedCountry] = useState<Covid19DataByCountry>();\r\n    return (\r\n        <Layout>\r\n            <bt.Container>\r\n                <bt.Row>\r\n                    <bt.Col> Under development </bt.Col>\r\n                </bt.Row>\r\n            </bt.Container>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport default Who;","import React, { useState, createContext, useContext } from 'react';\r\nimport { AppSetting } from '../types/type';\r\n\r\nlet appSetting: AppSetting = require('../appSetting.json');\r\n\r\nexport type AppContextType = {\r\n    locale: string;\r\n    setLocale: (string: string) => void;\r\n    appSetting: AppSetting;\r\n}\r\n\r\nexport const AppContext = createContext<AppContextType>({\r\n    locale: 'en',\r\n    setLocale: locale => console.warn('No locale provider'),\r\n    appSetting: appSetting\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);\r\n\r\nexport const AppProvider: React.FC = ({ children }) => {\r\n    const defaultLocale = window.localStorage.getItem('covid-19-tracking-lang');\r\n    const [locale, setLocale] = useState<string>(defaultLocale || 'en');\r\n\r\n    const provider = {\r\n        locale,\r\n        setLocale,\r\n        appSetting\r\n    };\r\n    return (\r\n        <>\r\n            <AppContext.Provider value={provider}>\r\n                {children}\r\n            </AppContext.Provider>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n","import React, { useContext } from 'react';\r\nimport { dictionaryList } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\n\r\ntype props = {\r\n    tid: string;\r\n    params?: string[];\r\n}\r\nconst StringFormat = (str: string, args: string[]) =>\r\n    str.replace(/{(\\d+)}/g, (match, index) => args[index] || '');\r\n\r\nexport const Translation: React.FC<props> = (props) => {\r\n    const { locale } = useAppContext();\r\n    const { tid, params } = props;\r\n    if (params != undefined)\r\n        return StringFormat((dictionaryList[locale][tid] || tid), params!)\r\n    else\r\n        return (dictionaryList[locale][tid] || tid);\r\n};\r\n\r\nexport const PTranslation: React.FC<props> = ({ tid }) => {\r\n    const { locale } = useAppContext();\r\n    return <p>{dictionaryList[locale][tid] || tid}</p>\r\n};\r\n","import { Dictionary } from '../types/type';\r\nimport en from './en.json';\r\nimport vn from './vn.json';\r\nimport countries from './countries.json';\r\nexport const dictionaryList: Dictionary<any> = { \"en\": en, \"vn\": vn };\r\nexport const localeOptions: Dictionary<any> = {\r\n    en: 'English',\r\n    vn: 'Tiếng việt',\r\n};\r\n\r\nexport const KeyValues: Dictionary<any> = { \"country\": countries };\r\n\r\n\r\n","import React, { useContext, MouseEvent } from 'react';\r\nimport { localeOptions } from '../../locales';\r\nimport { useAppContext } from '../../contexts/appContext';\r\nimport * as bt from 'react-bootstrap';\r\n\r\nexport const LanguageSelector: React.FC = () => {\r\n    const { locale, setLocale } = useAppContext();\r\n    const handleLanguageChange: React.MouseEventHandler<HTMLAnchorElement> = (e) => {\r\n        var selectLang = (e.target as HTMLAnchorElement).id;\r\n        window.localStorage.setItem('covid-19-tracking-lang', selectLang);\r\n        setLocale(selectLang);\r\n        console.log(selectLang);\r\n    }\r\n    return (\r\n        <>\r\n            <bt.NavDropdown title={localeOptions[locale]} id=\"languageSelector\">\r\n                {Object.entries(localeOptions).map(([id, name]) => (\r\n                    <bt.NavDropdown.Item key={id} id={id} onClick={handleLanguageChange}>{name}</bt.NavDropdown.Item>\r\n                ))}\r\n            </bt.NavDropdown>\r\n        </>\r\n    );\r\n};","import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../../components/translation/'\r\nimport { LanguageSelector } from '../languageSelector';\r\nimport { AppProvider } from '../../contexts/appContext';\r\nconst Navigation: React.FC = () => {\r\n    return (\r\n        <>\r\n            <bt.Navbar collapseOnSelect variant=\"light\" expand=\"lg\">\r\n                <bt.Container>\r\n                    <bt.Navbar.Brand href=\"/\"><Translation tid=\"app_title\" /></bt.Navbar.Brand>\r\n                    <bt.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <bt.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/\"><Translation tid=\"home\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        {/* <bt.Nav>\r\n                            <bt.Nav.Link href=\"/who\"><Translation tid=\"who\" /></bt.Nav.Link>\r\n                        </bt.Nav>\r\n                        <bt.Nav>\r\n                            <bt.Nav.Link href=\"/vaccinedata\"><Translation tid=\"vaccinedata\" /></bt.Nav.Link>\r\n                        </bt.Nav> */}\r\n                        <bt.Nav className=\"me-auto\"></bt.Nav>\r\n                        <LanguageSelector />\r\n                    </bt.Navbar.Collapse>\r\n                </bt.Container>\r\n            </bt.Navbar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport { Translation } from '../translation';\r\nimport { AppSetting } from '../../types/type';\r\n\r\nlet appSetting: AppSetting = require('../../appSetting.json');\r\n\r\n\r\nconst EnvironmentInfo: React.FC = () => {\r\n    if (process.env.NODE_ENV.toLocaleUpperCase() == 'DEVELOPMENT' && !appSetting.ForceHideEnvironment) {\r\n        return (\r\n            < bt.Alert variant='info' >\r\n                <small><Translation tid=\"app_environment_message\" params={[process.env.NODE_ENV.toLocaleUpperCase()]} /></small>\r\n            </bt.Alert >\r\n        );\r\n    }\r\n    else {\r\n        return (<></>);\r\n    }\r\n}\r\n\r\nexport default EnvironmentInfo;\r\n\r\n\r\n\r\n\r\n","import React, { ReactElement } from 'react';\r\nimport * as bt from 'react-bootstrap';\r\nimport Navigation from '../../components/navigation/'\r\nimport { AppProvider } from '../../contexts/appContext';\r\nimport EnvironmentInfo from '../environmentInfo';\r\n\r\n\r\nconst Layout: React.FC = ({ children }): ReactElement => {\r\n    return (\r\n        <>\r\n            <AppProvider>\r\n                <bt.Container className=\"justify-content-md-center\">\r\n                    <bt.Row>\r\n                        <EnvironmentInfo />\r\n                        <Navigation />\r\n                    </bt.Row>\r\n                </bt.Container>\r\n                {children}\r\n            </AppProvider>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Layout;"],"sourceRoot":""}